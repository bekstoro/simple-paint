{"version":3,"sources":["app/App.constants.js","components/Header.component.js","applets/canvas/canvas.selectors.js","applets/canvas/components/Canvas.container.js","applets/canvas/components/Canvas.component.js","applets/canvas/canvas.actions.js","applets/canvas/components/CanvasSettings.container.js","applets/canvas/components/CanvasSettings.component.js","applets/canvas/canvas.reducer.js","applets/canvas/canvas.saga.js","applets/fill/fill.selectors.js","applets/fill/components/Fill.container.js","applets/fill/components/Fill.component.js","applets/fill/fill.actions.js","applets/fill/components/FillSettings.container.js","applets/fill/components/FillSettings.component.js","applets/fill/fill.reducer.js","applets/fill/fill.saga.js","applets/line/line.selectors.js","applets/line/components/Line.container.js","applets/line/components/Line.component.js","applets/line/line.actions.js","applets/line/components/LineSettings.container.js","applets/line/components/LineSettings.component.js","applets/line/line.reducer.js","applets/line/line.saga.js","applets/rectangle/rectangle.selectors.js","applets/rectangle/components/Rectangle.container.js","applets/rectangle/components/Rectangle.component.js","applets/rectangle/rectangle.actions.js","applets/rectangle/components/RectangleSettings.container.js","applets/rectangle/components/RectangleSettings.component.js","applets/rectangle/rectangle.reducer.js","applets/rectangle/rectangle.saga.js","screens/Paint.component.js","helpers/board.js","screens/Settings.component.js","app/App.js","serviceWorker.js","store/reducers.js","store/saga.js","store/index.js","index.js"],"names":["validationMessages","canvasHeight","canvasWidth","coordinatesFieldRule","requiredField","Header","withStyles","appBar","position","iconMargin","marginLeft","classes","AppBar","className","Toolbar","Typography","variant","noWrap","IconButton","color","aria-label","Link","href","target","title","selectCanvas","state","height","canvas","width","selectCanvasHeight","selectCanvasWidth","selectCanvasSettingsIsFailed","isFailed","selectCanvasSettingsIsLoading","isLoading","connect","props","setCanvasSettingsRequest","payload","type","setCanvasSettingsSuccess","CanvasSettings","dispatch","bindActionCreators","handleNext","useState","setWidth","setHeight","isWidthValid","setIsWidthValid","isHeightValid","setIsHeightValid","Grid","container","item","xs","TextField","fullWidth","label","name","placeholder","defaultValue","onChange","val","value","margin","required","error","helperText","style","display","marginTop","justifyContent","Button","onClick","onValidate","canvasReducer","handleActions","setCanvasSettingsSaga","canvasSaga","validateCanvasSettingsSaga","take","put","fork","selectFill","fill","selectFillHeight","selectFillWidth","selectFillColor","selectFillSettingsIsFailed","selectFillSettingsIsLoading","setFillSettingsRequest","setFillSettingsSuccess","FillSettings","setColor","isColorValid","setIsColorValid","fillReducer","validateFillSettingsSaga","setFillSettingsSaga","fillSaga","select","call","selectLine","x1","line","y1","x2","y2","selectLineX1","selectLineY1","selectLineX2","selectLineY2","selectLineSettingsIsFailed","selectLineSettingsIsLoading","setLineSettingsRequest","setLineSettingsSuccess","LineSettings","setX1","setX2","setY1","setY2","isX1Valid","setIsX1Valid","isY1Valid","setIsY1Valid","isX2Valid","setIsX2Valid","isY2Valid","setIsY2Valid","lineReducer","validateLineSettingsSaga","setLineSettingsSaga","lineSaga","selectRectangle","rectangle","selectRectangleX1","selectRectangleY1","selectRectangleX2","selectRectangleY2","selectRectangleSettingsIsFailed","selectRectangleSettingsIsLoading","setRectangleSettingsRequest","setRectangleSettingsSuccess","RectangleSettings","rx1","setRx1","rx2","setRx2","ry1","setRy1","ry2","setRy2","isRx1Valid","setIsRx1Valid","isRy1Valid","setIsRy1Valid","isRx2Valid","setIsRx2Valid","isRy2Valid","setIsRy2Valid","rectangleReducer","validateRectangleSettingsSaga","setRectangleSettingsSaga","rectangleSaga","Paint","table","td","border","figure","backgroundColor","lineCoordinates","isHorizontal","startPoint","endPoint","coordinates","i","push","getLineCoordinates","rectangleCoordinates","getRectangleCoordinates","board","row","j","forEach","x","y","getBoard","setBoard","map","key","cell","setTimeout","fillBoard","newBoard","classNames","labels","Settings","theme","paper","spacing","marginBottom","padding","breakpoints","up","step","onSubmit","steps","setSteps","length","Paper","Stepper","activeStep","paddingTop","paddingBottom","alternativeLabel","Step","StepLabel","0","1","2","3","App","layout","marginRight","isAllSettingsAvailable","setSettings","CssBaseline","Boolean","window","location","hostname","match","rootReducer","combineReducers","rootSaga","all","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","store","createStore","composeWithDevTools","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5dff9b26.chunk.js","sourcesContent":["export const minCanvasWidth = 20;\r\nexport const minCanvasHeight = 20;\r\nexport const maxCanvasWidth = 100;\r\nexport const maxCanvasHeight = 100;\r\n\r\nexport const githubUrl = 'http://github.com/bekstoro/simple-paint';\r\n\r\nexport const validationMessages = {\r\n    canvasHeight: `Height is required field, it should be more than ${minCanvasHeight} and less than ${maxCanvasHeight}`,\r\n    canvasWidth: `Width is required field, it should be more than ${minCanvasWidth} and less than ${maxCanvasWidth}`,\r\n    coordinatesFieldRule: 'Coordinates are required, it should be within canvas area',\r\n    requiredField: 'This field is required'\r\n};\r\n","import React from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from '@material-ui/core/Link';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GithubIcon from '@material-ui/icons/GitHub'\r\nimport PropTypes from 'prop-types';\r\nimport {githubUrl} from '../app/App.constants';\r\n\r\nconst styles = () => ({\r\n    appBar: {\r\n        position: 'relative'\r\n    },\r\n    iconMargin: {\r\n        marginLeft: 'auto'\r\n    }\r\n});\r\n\r\nconst HeaderComponent = ({classes}) =>\r\n    <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n            <Typography variant=\"h6\" noWrap>\r\n                Simple Paint\r\n            </Typography>\r\n            <IconButton color=\"inherit\" aria-label=\"Github\" className={classes.iconMargin}>\r\n                <Link\r\n                    href={githubUrl}\r\n                    target=\"_blank\"\r\n                    title=\"Github\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <GithubIcon/>\r\n                </Link>\r\n            </IconButton>\r\n        </Toolbar>\r\n    </AppBar>;\r\n\r\nHeaderComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport const Header = withStyles(styles)(HeaderComponent);\r\n","export const selectCanvas = state => ({height: state.canvas.height, width: state.canvas.width});\r\n\r\nexport const selectCanvasHeight = state => state.canvas.height;\r\n\r\nexport const selectCanvasWidth = state => state.canvas.width;\r\n\r\nexport const selectCanvasSettingsIsFailed = state => state.canvas.isFailed;\r\n\r\nexport const selectCanvasSettingsIsLoading = state => state.canvas.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {CanvasComponent} from './Canvas.component';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    height: selectCanvasHeight(state),\r\n    width: selectCanvasWidth(state)\r\n});\r\n\r\nexport const Canvas = connect(\r\n    mapStateToProps,\r\n    null\r\n)(CanvasComponent);\r\n","import React from 'react';\r\n\r\nexport function CanvasComponent(props) {\r\n    return (\r\n        <div>CanvasComponent</div>\r\n    );\r\n}\r\n","export const SET_CANVAS_SETTINGS_REQUEST = 'SET_CANVAS_SETTINGS_REQUEST';\r\nexport const setCanvasSettingsRequest = payload => ({type: SET_CANVAS_SETTINGS_REQUEST, payload});\r\n\r\nexport const SET_CANVAS_SETTINGS_SUCCESS = 'SET_CANVAS_SETTINGS_SUCCESS';\r\nexport const setCanvasSettingsSuccess = payload => ({type: SET_CANVAS_SETTINGS_SUCCESS, payload});\r\n\r\nexport const SET_CANVAS_SETTINGS_FAILURE = 'SET_CANVAS_SETTINGS_FAILURE';\r\nexport const setCanvasSettingsFailure = () => ({type: SET_CANVAS_SETTINGS_FAILURE});\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\nimport {CanvasSettingsComponent} from './CanvasSettings.component';\r\nimport {setCanvasSettingsRequest} from '../canvas.actions';\r\nimport {selectCanvasSettingsIsFailed, selectCanvasSettingsIsLoading} from '../canvas.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    isFailed: selectCanvasSettingsIsFailed(state),\r\n    isLoading: selectCanvasSettingsIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCanvasSettingsRequest: bindActionCreators(setCanvasSettingsRequest, dispatch)\r\n});\r\n\r\nexport const CanvasSettings = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CanvasSettingsComponent);\r\n","import React, {Fragment, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    maxCanvasHeight,\r\n    maxCanvasWidth,\r\n    minCanvasHeight,\r\n    minCanvasWidth,\r\n    validationMessages\r\n} from '../../../app/App.constants';\r\n\r\nexport function CanvasSettingsComponent({\r\n                                            handleNext,\r\n                                            setCanvasSettingsRequest\r\n                                        }) {\r\n    const [width, setWidth] = useState(minCanvasWidth);\r\n    const [height, setHeight] = useState(minCanvasHeight);\r\n    const [isWidthValid, setIsWidthValid] = useState(true);\r\n    const [isHeightValid, setIsHeightValid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isWidthValid = width && width >= minCanvasWidth && width <= maxCanvasWidth;\r\n        setIsWidthValid(isWidthValid);\r\n\r\n        const isHeightValid = height && height >= minCanvasHeight && height <= maxCanvasHeight;\r\n        setIsHeightValid(isHeightValid);\r\n\r\n        return isWidthValid && isHeightValid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setCanvasSettingsRequest({width, height});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isWidthValid}\r\n                        helperText={!isWidthValid && validationMessages.canvasWidth}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isHeightValid}\r\n                        helperText={!isHeightValid && validationMessages.canvasHeight}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nCanvasSettingsComponent.propTypes = {\r\n    handleNext: PropTypes.func.isRequired,\r\n    setCanvasSettingsRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\nimport {SET_CANVAS_SETTINGS_FAILURE, SET_CANVAS_SETTINGS_REQUEST, SET_CANVAS_SETTINGS_SUCCESS} from './canvas.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    width: 0,\r\n    height: 0,\r\n};\r\n\r\nexport const canvasReducer = handleActions({\r\n    [SET_CANVAS_SETTINGS_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_CANVAS_SETTINGS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_CANVAS_SETTINGS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            width: payload.width,\r\n            height: payload.height,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {fork, put, take} from 'redux-saga/effects';\r\nimport {SET_CANVAS_SETTINGS_REQUEST, setCanvasSettingsFailure, setCanvasSettingsSuccess} from './canvas.actions';\r\nimport {maxCanvasHeight, maxCanvasWidth, minCanvasHeight, minCanvasWidth} from '../../app/App.constants';\r\n\r\nconst validateCanvasSettingsSaga = ({width, height}) =>\r\n    width && height && width >= minCanvasWidth && width <= maxCanvasWidth && height >= minCanvasHeight && height <= maxCanvasHeight;\r\n\r\nfunction* setCanvasSettingsSaga() {\r\n    const {payload} = yield take(SET_CANVAS_SETTINGS_REQUEST);\r\n    const isValid = validateCanvasSettingsSaga(payload);\r\n    isValid ? yield put(setCanvasSettingsSuccess(payload)) : yield put(setCanvasSettingsFailure());\r\n}\r\n\r\nexport function* canvasSaga() {\r\n    yield fork(setCanvasSettingsSaga);\r\n}\r\n","export const selectFill = state => ({height: state.fill.height, width: state.fill.width, color: state.fill.color});\r\n\r\nexport const selectFillHeight = state => state.fill.height;\r\n\r\nexport const selectFillWidth = state => state.fill.width;\r\n\r\nexport const selectFillColor = state => state.fill.color;\r\n\r\nexport const selectFillSettingsIsFailed = state => state.fill.isFailed;\r\n\r\nexport const selectFillSettingsIsLoading = state => state.fill.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {FillComponent} from './Fill.component';\r\nimport {selectFillColor, selectFillHeight, selectFillWidth} from '../fill.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    width: selectFillWidth(state),\r\n    height: selectFillHeight(state),\r\n    color: selectFillColor(state),\r\n});\r\n\r\nexport const Fill = connect(\r\n    mapStateToProps,\r\n    null\r\n)(FillComponent);\r\n","import React from 'react';\r\n\r\nexport function FillComponent(props) {\r\n    return (\r\n        <div>FillComponent</div>\r\n    );\r\n}\r\n","export const SET_FILL_SETTINGS_REQUEST = 'SET_FILL_SETTINGS_REQUEST';\r\nexport const setFillSettingsRequest = payload => ({type: SET_FILL_SETTINGS_REQUEST, payload});\r\n\r\nexport const SET_FILL_SETTINGS_SUCCESS = 'SET_FILL_SETTINGS_SUCCESS';\r\nexport const setFillSettingsSuccess = payload => ({type: SET_FILL_SETTINGS_SUCCESS, payload});\r\n\r\nexport const SET_FILL_SETTINGS_FAILURE = 'SET_FILL_SETTINGS_FAILURE';\r\nexport const setFillSettingsFailure = () => ({type: SET_FILL_SETTINGS_FAILURE});\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\nimport {FillSettingsComponent} from './FillSettings.component';\r\nimport {setFillSettingsRequest} from '../fill.actions';\r\nimport {selectFillSettingsIsFailed, selectFillSettingsIsLoading} from '../fill.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    isFailed: selectFillSettingsIsFailed(state),\r\n    isLoading: selectFillSettingsIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFillSettingsRequest: bindActionCreators(setFillSettingsRequest, dispatch)\r\n});\r\n\r\nexport const FillSettings = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(FillSettingsComponent);\r\n","import React, {Fragment, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport {validationMessages} from '../../../app/App.constants';\r\n\r\nexport function FillSettingsComponent({\r\n                                          handleNext,\r\n                                          setFillSettingsRequest\r\n                                      }) {\r\n    const [width, setWidth] = useState(0);\r\n    const [height, setHeight] = useState(0);\r\n    const [color, setColor] = useState('#000000');\r\n    const [isWidthValid, setIsWidthValid] = useState(true);\r\n    const [isHeightValid, setIsHeightValid] = useState(true);\r\n    const [isColorValid, setIsColorValid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isWidthValid = width && width > 0;\r\n        setIsWidthValid(isWidthValid);\r\n\r\n        const isHeightValid = height && height > 0;\r\n        setIsHeightValid(isHeightValid);\r\n\r\n        // TODO add color regex check\r\n        const isColorValid = color;\r\n        setIsColorValid(!!color);\r\n\r\n        return isWidthValid && isHeightValid && isColorValid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setFillSettingsRequest({width, height, color});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isWidthValid}\r\n                        helperText={!isWidthValid && validationMessages.canvasWidth}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isHeightValid}\r\n                        helperText={!isHeightValid && validationMessages.canvasHeight}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Color\"\r\n                        name=\"color\"\r\n                        placeholder=\"Set color\"\r\n                        defaultValue={color}\r\n                        onChange={val => setColor(val.target.value)}\r\n                        margin=\"normal\"\r\n                        required\r\n                        error={!isColorValid}\r\n                        helperText={!isColorValid && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nFillSettingsComponent.propTypes = {\r\n    handleNext: PropTypes.func.isRequired,\r\n    setFillSettingsRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\nimport {SET_FILL_SETTINGS_FAILURE, SET_FILL_SETTINGS_REQUEST, SET_FILL_SETTINGS_SUCCESS} from './fill.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    width: 0,\r\n    height: 0,\r\n    color: ''\r\n};\r\n\r\nexport const fillReducer = handleActions({\r\n    [SET_FILL_SETTINGS_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_FILL_SETTINGS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_FILL_SETTINGS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            width: payload.width,\r\n            height: payload.height,\r\n            color: payload.color,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\nimport {SET_FILL_SETTINGS_REQUEST, setFillSettingsFailure, setFillSettingsSuccess} from './fill.actions';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\n\r\nfunction* validateFillSettingsSaga({width, height, color}) {\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    // TODO check if in canvas area\r\n    return true;\r\n}\r\n\r\nfunction* setFillSettingsSaga() {\r\n    const {payload} = yield take(SET_FILL_SETTINGS_REQUEST);\r\n    const isValid = yield call(validateFillSettingsSaga, payload);\r\n    isValid ? yield put(setFillSettingsSuccess(payload)) : yield put(setFillSettingsFailure());\r\n}\r\n\r\nexport function* fillSaga() {\r\n    yield fork(setFillSettingsSaga);\r\n}\r\n","export const selectLine = state => ({x1: state.line.x1, y1: state.line.y1, x2: state.line.x2, y2: state.line.y2});\r\n\r\nexport const selectLineX1 = state => state.line.x1;\r\n\r\nexport const selectLineY1 = state => state.line.y1;\r\n\r\nexport const selectLineX2 = state => state.line.x2;\r\n\r\nexport const selectLineY2 = state => state.line.y2;\r\n\r\nexport const selectLineSettingsIsFailed = state => state.line.isFailed;\r\n\r\nexport const selectLineSettingsIsLoading = state => state.line.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {LineComponent} from './Line.component';\r\nimport {selectLineX1, selectLineX2, selectLineY1, selectLineY2} from '../line.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    x1: selectLineX1(state),\r\n    y1: selectLineY1(state),\r\n    x2: selectLineX2(state),\r\n    y2: selectLineY2(state),\r\n});\r\n\r\nexport const Line = connect(\r\n    mapStateToProps,\r\n    null\r\n)(LineComponent);\r\n","import React from 'react';\r\n\r\nexport function LineComponent(props) {\r\n    return (\r\n        <div>LineComponent</div>\r\n    );\r\n}\r\n","export const SET_LINE_SETTINGS_REQUEST = 'SET_LINE_SETTINGS_REQUEST';\r\nexport const setLineSettingsRequest = payload => ({type: SET_LINE_SETTINGS_REQUEST, payload});\r\n\r\nexport const SET_LINE_SETTINGS_SUCCESS = 'SET_LINE_SETTINGS_SUCCESS';\r\nexport const setLineSettingsSuccess = payload => ({type: SET_LINE_SETTINGS_SUCCESS, payload});\r\n\r\nexport const SET_LINE_SETTINGS_FAILURE = 'SET_LINE_SETTINGS_FAILURE';\r\nexport const setLineSettingsFailure = () => ({type: SET_LINE_SETTINGS_FAILURE});\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\nimport {LineSettingsComponent} from './LineSettings.component';\r\nimport {setLineSettingsRequest} from '../line.actions';\r\nimport {selectLineSettingsIsFailed, selectLineSettingsIsLoading} from '../line.selectors';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../../canvas';\r\n\r\nconst mapStateToProps = state => ({\r\n    canvasHeight: selectCanvasHeight(state),\r\n    canvasWidth: selectCanvasWidth(state),\r\n    isFailed: selectLineSettingsIsFailed(state),\r\n    isLoading: selectLineSettingsIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setLineSettingsRequest: bindActionCreators(setLineSettingsRequest, dispatch)\r\n});\r\n\r\nexport const LineSettings = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LineSettingsComponent);\r\n","import React, {Fragment, useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport {validationMessages} from '../../../app/App.constants';\r\n\r\nexport function LineSettingsComponent({\r\n                                          canvasHeight,\r\n                                          canvasWidth,\r\n                                          handleNext,\r\n                                          setLineSettingsRequest\r\n                                      }) {\r\n    const [x1, setX1] = useState(0);\r\n    const [x2, setX2] = useState(0);\r\n    const [y1, setY1] = useState(0);\r\n    const [y2, setY2] = useState(0);\r\n    const [isX1Valid, setIsX1Valid] = useState(true);\r\n    const [isY1Valid, setIsY1Valid] = useState(true);\r\n    const [isX2Valid, setIsX2Valid] = useState(true);\r\n    const [isY2Valid, setIsY2Valid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isX1Valid = x1 && x1 > 0 && x1 <= canvasWidth;\r\n        const isY1Valid = y1 && y1 > 0 && y1 <= canvasHeight;\r\n        const isX2Valid = x2 && x2 > 0 && x2 <= canvasWidth;\r\n        const isY2Valid = y2 && y2 > 0 && y2 <= canvasHeight;\r\n        setIsX1Valid(isX1Valid);\r\n        setIsY1Valid(isY1Valid);\r\n        setIsX2Valid(isX2Valid);\r\n        setIsY2Valid(isY2Valid);\r\n\r\n        return isX1Valid && isX2Valid && isY1Valid && isY2Valid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setLineSettingsRequest({x1, y1, x2, y2});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint xCoordinate\"\r\n                        name=\"x1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x1}\r\n                        onChange={val => setX1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isX1Valid}\r\n                        helperText={!isX1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint yCoordinate\"\r\n                        name=\"y1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y1}\r\n                        onChange={val => setY1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isY1Valid}\r\n                        helperText={!isY1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint xCoordinate\"\r\n                        name=\"x2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x2}\r\n                        onChange={val => setX2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isX2Valid}\r\n                        helperText={!isX2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint yCoordinate\"\r\n                        name=\"y2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y2}\r\n                        onChange={val => setY2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isY2Valid}\r\n                        helperText={!isY2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nLineSettingsComponent.propTypes = {\r\n    canvasHeight: PropTypes.number.isRequired,\r\n    canvasWidth: PropTypes.number.isRequired,\r\n    handleNext: PropTypes.func.isRequired,\r\n    setLineSettingsRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\nimport {SET_LINE_SETTINGS_FAILURE, SET_LINE_SETTINGS_REQUEST, SET_LINE_SETTINGS_SUCCESS} from './line.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 0,\r\n    y2: 0,\r\n};\r\n\r\nexport const lineReducer = handleActions({\r\n    [SET_LINE_SETTINGS_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_LINE_SETTINGS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_LINE_SETTINGS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            x1: payload.x1,\r\n            y1: payload.y1,\r\n            x2: payload.x2,\r\n            y2: payload.y2,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\nimport {SET_LINE_SETTINGS_REQUEST, setLineSettingsFailure, setLineSettingsSuccess} from './line.actions';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\n\r\nfunction* validateLineSettingsSaga({x1, y1, x2, y2}) {\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    // TODO check if in canvas area\r\n    return true;\r\n}\r\n\r\nfunction* setLineSettingsSaga() {\r\n    const {payload} = yield take(SET_LINE_SETTINGS_REQUEST);\r\n    const isValid = yield call(validateLineSettingsSaga, payload);\r\n    isValid ? yield put(setLineSettingsSuccess(payload)) : yield put(setLineSettingsFailure());\r\n}\r\n\r\nexport function* lineSaga() {\r\n    yield fork(setLineSettingsSaga);\r\n}\r\n","export const selectRectangle = state => ({x1: state.rectangle.x1, y1: state.rectangle.y1, x2: state.rectangle.x2, y2: state.rectangle.y2});\r\n\r\nexport const selectRectangleX1 = state => state.rectangle.x1;\r\n\r\nexport const selectRectangleY1 = state => state.rectangle.y1;\r\n\r\nexport const selectRectangleX2 = state => state.rectangle.x2;\r\n\r\nexport const selectRectangleY2 = state => state.rectangle.y2;\r\n\r\nexport const selectRectangleSettingsIsFailed = state => state.rectangle.isFailed;\r\n\r\nexport const selectRectangleSettingsIsLoading = state => state.rectangle.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {RectangleComponent} from './Rectangle.component';\r\nimport {selectRectangleX1, selectRectangleX2, selectRectangleY1, selectRectangleY2} from '../rectangle.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    x1: selectRectangleX1(state),\r\n    y1: selectRectangleY1(state),\r\n    x2: selectRectangleX2(state),\r\n    y2: selectRectangleY2(state)\r\n});\r\n\r\nexport const Rectangle = connect(\r\n    mapStateToProps,\r\n    null\r\n)(RectangleComponent);\r\n","import React from 'react';\r\n\r\nexport function RectangleComponent(props) {\r\n    return (\r\n        <div>RectangleComponent</div>\r\n    );\r\n}\r\n","export const SET_RECTANGLE_SETTINGS_REQUEST = 'SET_RECTANGLE_SETTINGS_REQUEST';\r\nexport const setRectangleSettingsRequest = payload => ({type: SET_RECTANGLE_SETTINGS_REQUEST, payload});\r\n\r\nexport const SET_RECTANGLE_SETTINGS_SUCCESS = 'SET_RECTANGLE_SETTINGS_SUCCESS';\r\nexport const setRectangleSettingsSuccess = payload => ({type: SET_RECTANGLE_SETTINGS_SUCCESS, payload});\r\n\r\nexport const SET_RECTANGLE_SETTINGS_FAILURE = 'SET_RECTANGLE_SETTINGS_FAILURE';\r\nexport const setRectangleSettingsFailure = () => ({type: SET_RECTANGLE_SETTINGS_FAILURE});\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\nimport {RectangleSettingsComponent} from './RectangleSettings.component';\r\nimport {setRectangleSettingsRequest} from '../rectangle.actions';\r\nimport {selectRectangleSettingsIsFailed, selectRectangleSettingsIsLoading} from '../rectangle.selectors';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../../canvas';\r\n\r\nconst mapStateToProps = state => ({\r\n    canvasHeight: selectCanvasHeight(state),\r\n    canvasWidth: selectCanvasWidth(state),\r\n    isFailed: selectRectangleSettingsIsFailed(state),\r\n    isLoading: selectRectangleSettingsIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRectangleSettingsRequest: bindActionCreators(setRectangleSettingsRequest, dispatch)\r\n});\r\n\r\nexport const RectangleSettings = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RectangleSettingsComponent);\r\n","import React, {Fragment, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport {validationMessages} from '../../../app/App.constants';\r\n\r\nexport function RectangleSettingsComponent({\r\n                                               canvasHeight,\r\n                                               canvasWidth,\r\n                                               handleNext,\r\n                                               setRectangleSettingsRequest\r\n                                           }) {\r\n    const [rx1, setRx1] = useState(0);\r\n    const [rx2, setRx2] = useState(0);\r\n    const [ry1, setRy1] = useState(0);\r\n    const [ry2, setRy2] = useState(0);\r\n    const [isRx1Valid, setIsRx1Valid] = useState(true);\r\n    const [isRy1Valid, setIsRy1Valid] = useState(true);\r\n    const [isRx2Valid, setIsRx2Valid] = useState(true);\r\n    const [isRy2Valid, setIsRy2Valid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isRx1Valid = rx1 && rx1 > 0 && rx1 <= canvasWidth;\r\n        const isRy1Valid = ry1 && ry1 > 0 && ry1 <= canvasHeight;\r\n        const isRx2Valid = rx2 && rx2 > 0 && rx2 <= canvasWidth;\r\n        const isRy2Valid = ry2 && ry2 > 0 && ry2 <= canvasHeight;\r\n        setIsRx1Valid(isRx1Valid);\r\n        setIsRy1Valid(isRy1Valid);\r\n        setIsRx2Valid(isRx2Valid);\r\n        setIsRy2Valid(isRy2Valid);\r\n\r\n        return isRx1Valid && isRx2Valid && isRy1Valid && isRy2Valid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setRectangleSettingsRequest({x1: rx1, y1: ry1, x2: rx2, y2: ry2});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint xCoordinate\"\r\n                        name=\"rx1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={rx1}\r\n                        onChange={val => setRx1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRx1Valid}\r\n                        helperText={!isRx1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint yCoordinate\"\r\n                        name=\"ry1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={ry1}\r\n                        onChange={val => setRy1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRy1Valid}\r\n                        helperText={!isRy1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint xCoordinate\"\r\n                        name=\"rx2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={rx2}\r\n                        onChange={val => setRx2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRx2Valid}\r\n                        helperText={!isRx2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint yCoordinate\"\r\n                        name=\"ry2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={ry2}\r\n                        onChange={val => setRy2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRy2Valid}\r\n                        helperText={!isRy2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nRectangleSettingsComponent.propTypes = {\r\n    canvasHeight: PropTypes.number.isRequired,\r\n    canvasWidth: PropTypes.number.isRequired,\r\n    handleNext: PropTypes.func.isRequired,\r\n    setRectangleSettingsRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\nimport {SET_RECTANGLE_SETTINGS_FAILURE, SET_RECTANGLE_SETTINGS_REQUEST, SET_RECTANGLE_SETTINGS_SUCCESS} from './rectangle.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 0,\r\n    y2: 0\r\n};\r\n\r\nexport const rectangleReducer = handleActions({\r\n    [SET_RECTANGLE_SETTINGS_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_RECTANGLE_SETTINGS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_RECTANGLE_SETTINGS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            x1: payload.x1,\r\n            y1: payload.y1,\r\n            x2: payload.x2,\r\n            y2: payload.y2,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\nimport {SET_RECTANGLE_SETTINGS_REQUEST, setRectangleSettingsFailure, setRectangleSettingsSuccess} from './rectangle.actions';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\n\r\nfunction* validateRectangleSettingsSaga({x1, y1, x2, y2}) {\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    // TODO check if in canvas area\r\n    // TODO check if no cross with line\r\n    return true;\r\n}\r\n\r\nfunction* setRectangleSettingsSaga() {\r\n    const {payload} = yield take(SET_RECTANGLE_SETTINGS_REQUEST);\r\n    const isValid = yield call(validateRectangleSettingsSaga, payload);\r\n    isValid ? yield put(setRectangleSettingsSuccess(payload)) : yield put(setRectangleSettingsFailure());\r\n}\r\n\r\nexport function* rectangleSaga() {\r\n    yield fork(setRectangleSettingsSaga);\r\n}\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types';\r\nimport {selectCanvas} from '../applets/canvas';\r\nimport {selectFill} from '../applets/fill';\r\nimport {selectLine} from '../applets/line';\r\nimport {selectRectangle} from '../applets/rectangle';\r\nimport {fillBoard, getBoard, getLineCoordinates, getRectangleCoordinates} from '../helpers/board';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        margin: '1em auto'\r\n    },\r\n    td: {\r\n        border: '1px solid #DDD',\r\n        height: '1em',\r\n        width: '1em'\r\n    },\r\n    figure: {\r\n        backgroundColor: '#3f51b5'\r\n    }\r\n});\r\n\r\nexport function PaintComponent({\r\n                                   canvas,\r\n                                   fill,\r\n                                   line,\r\n                                   rectangle,\r\n                                   classes\r\n                               }) {\r\n    const lineCoordinates = getLineCoordinates(line);\r\n    const rectangleCoordinates = getRectangleCoordinates(rectangle);\r\n    const [board, setBoard] = useState(getBoard(canvas.height, canvas.width, lineCoordinates, rectangleCoordinates));\r\n    return (\r\n        <table className={classes.table}>\r\n            <tbody>\r\n            {\r\n                board.map((row, i) =>\r\n                    <tr key={i}>\r\n                        {\r\n                            row.map((cell, j) =>\r\n                                <td\r\n                                    key={j}\r\n                                    onClick={() => {\r\n                                        setBoard([]);\r\n                                        setTimeout(() => {\r\n                                            setBoard(fillBoard(board, i, j))\r\n                                        }, 0)\r\n                                    }}\r\n                                    className={classNames(classes.td, {\r\n                                        [classes.figure]: cell.value === 1\r\n                                    })}\r\n                                    style={{backgroundColor: cell.value === 2 && fill.color}}\r\n                                />)\r\n                        }\r\n                    </tr>)\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nPaintComponent.propTypes = {\r\n    canvas: PropTypes.object.isRequired,\r\n    fill: PropTypes.object.isRequired,\r\n    line: PropTypes.object.isRequired,\r\n    rectangle: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n    canvas: selectCanvas(state),\r\n    fill: selectFill(state),\r\n    line: selectLine(state),\r\n    rectangle: selectRectangle(state)\r\n});\r\n\r\nexport const Paint = connect(\r\n    mapStateToProps,\r\n    null\r\n)(withStyles(styles)(PaintComponent));\r\n","export const fillBoard = (board, x, y) => {\r\n    let newBoard = board;\r\n    if (newBoard[x] && newBoard[x][y] && newBoard[x][y].value === 0) {\r\n        newBoard[x][y].value = 2;\r\n        newBoard = fillBoard(newBoard, x - 1, y);\r\n        newBoard = fillBoard(newBoard, x + 1, y);\r\n        newBoard = fillBoard(newBoard, x, y - 1);\r\n        newBoard = fillBoard(newBoard, x, y + 1);\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nexport const getBoard = (height, width, lineCoordinates, rectangleCoordinates) => {\r\n    const board = [];\r\n    for (let i = 0; i < height; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < width; j++) {\r\n            row.push({value: 0});\r\n        }\r\n        board.push(row);\r\n    }\r\n    [...lineCoordinates, ...rectangleCoordinates].forEach(([x, y]) => {\r\n        board[y][x].value = 1;\r\n    });\r\n    return board;\r\n};\r\n\r\nexport const getLineCoordinates = line => {\r\n    const {x1, y1, x2, y2} = line;\r\n    const isHorizontal = x1 !== x2;\r\n    const startPoint = isHorizontal ? x1 - 1 : y1 - 1;\r\n    const endPoint = isHorizontal ? x2 : y2;\r\n    const coordinates = [];\r\n    for (let i = startPoint; i < endPoint; i++) {\r\n        coordinates.push(isHorizontal ? [i, startPoint] : [startPoint, i]);\r\n    }\r\n    return coordinates\r\n};\r\n\r\nexport const getRectangleCoordinates = rectangle => {\r\n    const {x1, y1, x2, y2} = rectangle;\r\n    const coordinates = [];\r\n    for (let i = x1 - 1; i < x2; i++) {\r\n        coordinates.push([i, y1 - 1], [i, y2 - 1]);\r\n    }\r\n    for (let i = y1; i < y2; i++) {\r\n        coordinates.push([x1 - 1, i], [x2 - 1, i]);\r\n    }\r\n    return coordinates;\r\n};\r\n","import React, {useState} from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport PropTypes from 'prop-types';\r\nimport {CanvasSettings} from '../applets/canvas';\r\nimport {FillSettings} from '../applets/fill';\r\nimport {LineSettings} from '../applets/line';\r\nimport {RectangleSettings} from '../applets/rectangle';\r\n\r\nconst styles = theme => ({\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(8),\r\n            marginBottom: theme.spacing(8),\r\n            padding: theme.spacing(3)\r\n        }\r\n    }\r\n});\r\n\r\nconst labels = ['Canvas', 'Line', 'Rectangle', 'Bucket Fill'];\r\n\r\nconst SettingsComponent = ({classes, onSubmit}) => {\r\n    const [steps, setSteps] = useState(0);\r\n    const handleNext = () => setSteps(steps + 1);\r\n\r\n    const handleSteps = step => ({\r\n        0: <CanvasSettings handleNext={handleNext}/>,\r\n        1: <LineSettings handleNext={handleNext}/>,\r\n        2: <RectangleSettings handleNext={handleNext}/>,\r\n        3: <FillSettings handleNext={handleNext}/>\r\n    }[step]);\r\n\r\n    if (steps === labels.length) {\r\n        onSubmit();\r\n    }\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Stepper activeStep={steps} style={{paddingTop: 30, paddingBottom: 50}} alternativeLabel>\r\n                {\r\n                    labels.map(label => (<Step key={label}><StepLabel>{label}</StepLabel> </Step>))\r\n                }\r\n            </Stepper>\r\n            {handleSteps(steps)}\r\n        </Paper>\r\n    )\r\n};\r\n\r\nSettingsComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport const Settings = withStyles(styles)(SettingsComponent);\r\n","import React, {useState} from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport PropTypes from 'prop-types';\nimport {Header} from '../components/Header.component';\nimport {Paint} from '../screens/Paint.component';\nimport {Settings} from '../screens/Settings.component';\nimport './App.css';\n\nconst styles = theme => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 1000,\n            marginLeft: 'auto',\n            marginRight: 'auto'\n        }\n    }\n});\n\nfunction AppComponent({classes}) {\n    const [isAllSettingsAvailable, setSettings] = useState(false);\n    return (\n        <div className=\"App\">\n            <CssBaseline/>\n            <Header/>\n            <main className={classes.layout}>\n                { isAllSettingsAvailable ? <Paint/> : <Settings onSubmit={() => setSettings(true)}/> }\n            </main>\n        </div>\n    );\n}\n\nAppComponent.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport const App = withStyles(styles)(AppComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\r\nimport {canvasReducer} from '../applets/canvas';\r\nimport {fillReducer} from '../applets/fill';\r\nimport {lineReducer} from '../applets/line';\r\nimport {rectangleReducer} from '../applets/rectangle';\r\n\r\nexport const rootReducer = combineReducers({\r\n  canvas: canvasReducer,\r\n  fill: fillReducer,\r\n  line: lineReducer,\r\n  rectangle: rectangleReducer\r\n});\r\n","import {all} from 'redux-saga/effects'\r\nimport {canvasSaga} from '../applets/canvas';\r\nimport {fillSaga} from '../applets/fill';\r\nimport {lineSaga} from '../applets/line';\r\nimport {rectangleSaga} from '../applets/rectangle';\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        canvasSaga(),\r\n        fillSaga(),\r\n        lineSaga(),\r\n        rectangleSaga()\r\n    ]);\r\n}\r\n","import {createStore, applyMiddleware} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {rootReducer} from './reducers'\r\nimport {rootSaga} from './saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = applyMiddleware(sagaMiddleware);\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(middleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport {App} from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}