{"version":3,"sources":["App.constants.js","components/header.component.js","applets/canvas/canvas.actions.js","applets/canvas/canvas.selectors.js","applets/canvas/canvas.container.js","applets/canvas/canvas.component.js","applets/canvas/canvas.reducer.js","applets/canvas/canvas.saga.js","applets/fill/fill.actions.js","applets/fill/fill.selectors.js","applets/fill/fill.container.js","applets/fill/fill.component.js","applets/fill/fill.reducer.js","applets/fill/fill.saga.js","applets/line/line.actions.js","applets/line/line.selectors.js","applets/line/line.container.js","applets/line/line.component.js","applets/line/line.reducer.js","applets/line/line.saga.js","applets/rectangle/rectangle.actions.js","applets/rectangle/rectangle.selectors.js","applets/rectangle/rectangle.container.js","applets/rectangle/rectangle.component.js","applets/rectangle/rectangle.reducer.js","applets/rectangle/rectangle.saga.js","screens/board.screen.js","helpers/board.helper.js","screens/settings.screen.js","App.js","serviceWorker.js","store/reducers.js","store/saga.js","store/index.js","index.js"],"names":["validationMessages","canvasHeight","canvasWidth","coordinatesFieldRule","requiredField","Header","withStyles","appBar","position","iconMargin","marginLeft","classes","AppBar","className","Toolbar","Typography","variant","noWrap","IconButton","color","aria-label","Link","href","target","title","setCanvasRequest","payload","type","setCanvasSuccess","selectCanvas","state","height","canvas","width","selectCanvasHeight","selectCanvasWidth","selectCanvasIsFailed","isFailed","selectCanvasIsLoading","isLoading","Canvas","connect","dispatch","bindActionCreators","handleNext","useState","setWidth","setHeight","isWidthValid","setIsWidthValid","isHeightValid","setIsHeightValid","Grid","container","item","xs","TextField","fullWidth","label","name","placeholder","defaultValue","onChange","val","value","margin","required","error","helperText","style","display","marginTop","justifyContent","Button","onClick","onValidate","canvasReducer","handleActions","setCanvasSaga","canvasSaga","validateCanvasSaga","take","put","fork","setFillRequest","setFillSuccess","selectFill","fill","selectFillIsFailed","selectFillIsLoading","Fill","setColor","isColorValid","setIsColorValid","fillReducer","validateFillSaga","setFillSaga","fillSaga","select","call","setLineRequest","setLineSuccess","selectLine","x1","line","y1","x2","y2","selectLineIsFailed","selectLineIsLoading","Line","setX1","setX2","setY1","setY2","isX1Valid","setIsX1Valid","isY1Valid","setIsY1Valid","isX2Valid","setIsX2Valid","isY2Valid","setIsY2Valid","lineReducer","validateLineSaga","setLineSaga","lineSaga","setRectangleRequest","setRectangleSuccess","selectRectangle","rectangle","selectRectangleIsFailed","selectRectangleIsLoading","Rectangle","rx1","setRx1","rx2","setRx2","ry1","setRy1","ry2","setRy2","isRx1Valid","setIsRx1Valid","isRy1Valid","setIsRy1Valid","isRx2Valid","setIsRx2Valid","isRy2Valid","setIsRy2Valid","rectangleReducer","validateRectangleSaga","setRectangleSaga","rectangleSaga","Board","table","td","border","figure","backgroundColor","lineCoordinates","isHorizontal","startPoint","endPoint","coordinates","i","push","getLineCoordinates","rectangleCoordinates","getRectangleCoordinates","board","row","j","forEach","x","y","getBoard","setBoard","map","key","cell","setTimeout","fillBoard","newBoard","classNames","labelsOfSteps","Settings","stepper","paddingTop","paddingBottom","step","onSubmit","steps","setSteps","length","Stepper","activeStep","alternativeLabel","Step","StepLabel","0","1","2","3","App","theme","layout","spacing","marginRight","breakpoints","up","paper","marginBottom","padding","isAllSettingsAvailable","setSettings","CssBaseline","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","rootSaga","all","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","store","createStore","composeWithDevTools","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8b41f188.chunk.js","sourcesContent":["export const minCanvasWidth = 20;\r\nexport const minCanvasHeight = 20;\r\nexport const maxCanvasWidth = 100;\r\nexport const maxCanvasHeight = 100;\r\n\r\nexport const projectTitle = 'Simple Paint';\r\nexport const githubUrl = 'http://github.com/bekstoro/simple-paint';\r\n\r\nexport const validationMessages = {\r\n    canvasHeight: `Height is required field, it should be more than ${minCanvasHeight} and less than ${maxCanvasHeight}`,\r\n    canvasWidth: `Width is required field, it should be more than ${minCanvasWidth} and less than ${maxCanvasWidth}`,\r\n    coordinatesFieldRule: 'Coordinates are required, it should be within canvas area',\r\n    requiredField: 'This field is required'\r\n};\r\n","import React from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from '@material-ui/core/Link';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GithubIcon from '@material-ui/icons/GitHub'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {githubUrl, projectTitle} from '../App.constants';\r\n\r\nconst styles = () => ({\r\n    appBar: {\r\n        position: 'relative'\r\n    },\r\n    iconMargin: {\r\n        marginLeft: 'auto'\r\n    }\r\n});\r\n\r\nconst HeaderComponent = ({classes}) =>\r\n    <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n            <Typography variant=\"h6\" noWrap>{projectTitle}</Typography>\r\n            <IconButton color=\"inherit\" aria-label=\"Github\" className={classes.iconMargin}>\r\n                <Link\r\n                    href={githubUrl}\r\n                    target=\"_blank\"\r\n                    title=\"Github\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <GithubIcon/>\r\n                </Link>\r\n            </IconButton>\r\n        </Toolbar>\r\n    </AppBar>;\r\n\r\nHeaderComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport const Header = withStyles(styles)(HeaderComponent);\r\n","export const SET_CANVAS_REQUEST = 'SET_CANVAS_REQUEST';\r\nexport const setCanvasRequest = payload => ({type: SET_CANVAS_REQUEST, payload});\r\n\r\nexport const SET_CANVAS_SUCCESS = 'SET_CANVAS_SUCCESS';\r\nexport const setCanvasSuccess = payload => ({type: SET_CANVAS_SUCCESS, payload});\r\n\r\nexport const SET_CANVAS_FAILURE = 'SET_CANVAS_FAILURE';\r\nexport const setCanvasFailure = () => ({type: SET_CANVAS_FAILURE});\r\n","export const selectCanvas = state => ({height: state.canvas.height, width: state.canvas.width});\r\n\r\nexport const selectCanvasHeight = state => state.canvas.height;\r\n\r\nexport const selectCanvasWidth = state => state.canvas.width;\r\n\r\nexport const selectCanvasIsFailed = state => state.canvas.isFailed;\r\n\r\nexport const selectCanvasIsLoading = state => state.canvas.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setCanvasRequest} from './canvas.actions';\r\nimport {CanvasComponent} from './canvas.component';\r\nimport {selectCanvasIsFailed, selectCanvasIsLoading} from './canvas.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    isFailed: selectCanvasIsFailed(state),\r\n    isLoading: selectCanvasIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCanvasRequest: bindActionCreators(setCanvasRequest, dispatch)\r\n});\r\n\r\nexport const Canvas = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CanvasComponent);\r\n","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    maxCanvasHeight,\r\n    maxCanvasWidth,\r\n    minCanvasHeight,\r\n    minCanvasWidth,\r\n    validationMessages\r\n} from '../../App.constants';\r\n\r\nexport function CanvasComponent({\r\n                                    handleNext,\r\n                                    setCanvasRequest\r\n                                }) {\r\n    const [width, setWidth] = useState(minCanvasWidth);\r\n    const [height, setHeight] = useState(minCanvasHeight);\r\n    const [isWidthValid, setIsWidthValid] = useState(true);\r\n    const [isHeightValid, setIsHeightValid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isWidthValid = width && width >= minCanvasWidth && width <= maxCanvasWidth;\r\n        setIsWidthValid(isWidthValid);\r\n\r\n        const isHeightValid = height && height >= minCanvasHeight && height <= maxCanvasHeight;\r\n        setIsHeightValid(isHeightValid);\r\n\r\n        return isWidthValid && isHeightValid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setCanvasRequest({width, height});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isWidthValid}\r\n                        helperText={!isWidthValid && validationMessages.canvasWidth}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isHeightValid}\r\n                        helperText={!isHeightValid && validationMessages.canvasHeight}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasComponent.propTypes = {\r\n    handleNext: PropTypes.func.isRequired,\r\n    setCanvasRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_CANVAS_FAILURE, SET_CANVAS_REQUEST, SET_CANVAS_SUCCESS} from './canvas.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    width: 0,\r\n    height: 0,\r\n};\r\n\r\nexport const canvasReducer = handleActions({\r\n    [SET_CANVAS_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_CANVAS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_CANVAS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            width: payload.width,\r\n            height: payload.height,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {fork, put, take} from 'redux-saga/effects';\r\n\r\nimport {maxCanvasHeight, maxCanvasWidth, minCanvasHeight, minCanvasWidth} from '../../App.constants';\r\nimport {SET_CANVAS_REQUEST, setCanvasFailure, setCanvasSuccess} from './canvas.actions';\r\n\r\nconst validateCanvasSaga = ({width, height}) =>\r\n    width && height && width >= minCanvasWidth && width <= maxCanvasWidth && height >= minCanvasHeight && height <= maxCanvasHeight;\r\n\r\nfunction* setCanvasSaga() {\r\n    const {payload} = yield take(SET_CANVAS_REQUEST);\r\n    const isValid = validateCanvasSaga(payload);\r\n    isValid ? yield put(setCanvasSuccess(payload)) : yield put(setCanvasFailure());\r\n}\r\n\r\nexport function* canvasSaga() {\r\n    yield fork(setCanvasSaga);\r\n}\r\n","export const SET_FILL_REQUEST = 'SET_FILL_REQUEST';\r\nexport const setFillRequest = payload => ({type: SET_FILL_REQUEST, payload});\r\n\r\nexport const SET_FILL_SUCCESS = 'SET_FILL_SUCCESS';\r\nexport const setFillSuccess = payload => ({type: SET_FILL_SUCCESS, payload});\r\n\r\nexport const SET_FILL_FAILURE = 'SET_FILL_FAILURE';\r\nexport const setFillFailure = () => ({type: SET_FILL_FAILURE});\r\n","export const selectFill = state => ({height: state.fill.height, width: state.fill.width, color: state.fill.color});\r\n\r\nexport const selectFillHeight = state => state.fill.height;\r\n\r\nexport const selectFillWidth = state => state.fill.width;\r\n\r\nexport const selectFillColor = state => state.fill.color;\r\n\r\nexport const selectFillIsFailed = state => state.fill.isFailed;\r\n\r\nexport const selectFillIsLoading = state => state.fill.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setFillRequest} from './fill.actions';\r\nimport {FillComponent} from './fill.component';\r\nimport {selectFillIsFailed, selectFillIsLoading} from './fill.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    isFailed: selectFillIsFailed(state),\r\n    isLoading: selectFillIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFillRequest: bindActionCreators(setFillRequest, dispatch)\r\n});\r\n\r\nexport const Fill = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(FillComponent);\r\n","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\n\r\nexport function FillComponent({\r\n                                  handleNext,\r\n                                  setFillRequest\r\n                              }) {\r\n    const [width, setWidth] = useState(0);\r\n    const [height, setHeight] = useState(0);\r\n    const [color, setColor] = useState('#000000');\r\n    const [isWidthValid, setIsWidthValid] = useState(true);\r\n    const [isHeightValid, setIsHeightValid] = useState(true);\r\n    const [isColorValid, setIsColorValid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isWidthValid = width && width > 0;\r\n        setIsWidthValid(isWidthValid);\r\n\r\n        const isHeightValid = height && height > 0;\r\n        setIsHeightValid(isHeightValid);\r\n\r\n        // TODO add color regex check\r\n        const isColorValid = color;\r\n        setIsColorValid(!!color);\r\n\r\n        return isWidthValid && isHeightValid && isColorValid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setFillRequest({width, height, color});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isWidthValid}\r\n                        helperText={!isWidthValid && validationMessages.canvasWidth}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isHeightValid}\r\n                        helperText={!isHeightValid && validationMessages.canvasHeight}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Color\"\r\n                        name=\"color\"\r\n                        placeholder=\"Set color\"\r\n                        defaultValue={color}\r\n                        onChange={val => setColor(val.target.value)}\r\n                        margin=\"normal\"\r\n                        required\r\n                        error={!isColorValid}\r\n                        helperText={!isColorValid && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nFillComponent.propTypes = {\r\n    handleNext: PropTypes.func.isRequired,\r\n    setFillRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_FILL_FAILURE, SET_FILL_REQUEST, SET_FILL_SUCCESS} from './fill.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    width: 0,\r\n    height: 0,\r\n    color: ''\r\n};\r\n\r\nexport const fillReducer = handleActions({\r\n    [SET_FILL_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_FILL_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_FILL_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            width: payload.width,\r\n            height: payload.height,\r\n            color: payload.color,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_FILL_REQUEST, setFillFailure, setFillSuccess} from './fill.actions';\r\n\r\nfunction* validateFillSaga({width, height, color}) {\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    // TODO check if in canvas area\r\n    return true;\r\n}\r\n\r\nfunction* setFillSaga() {\r\n    const {payload} = yield take(SET_FILL_REQUEST);\r\n    const isValid = yield call(validateFillSaga, payload);\r\n    isValid ? yield put(setFillSuccess(payload)) : yield put(setFillFailure());\r\n}\r\n\r\nexport function* fillSaga() {\r\n    yield fork(setFillSaga);\r\n}\r\n","export const SET_LINE_REQUEST = 'SET_LINE_REQUEST';\r\nexport const setLineRequest = payload => ({type: SET_LINE_REQUEST, payload});\r\n\r\nexport const SET_LINE_SUCCESS = 'SET_LINE_SUCCESS';\r\nexport const setLineSuccess = payload => ({type: SET_LINE_SUCCESS, payload});\r\n\r\nexport const SET_LINE_FAILURE = 'SET_LINE_FAILURE';\r\nexport const setLineFailure = () => ({type: SET_LINE_FAILURE});\r\n","export const selectLine = state => ({x1: state.line.x1, y1: state.line.y1, x2: state.line.x2, y2: state.line.y2});\r\n\r\nexport const selectLineX1 = state => state.line.x1;\r\n\r\nexport const selectLineY1 = state => state.line.y1;\r\n\r\nexport const selectLineX2 = state => state.line.x2;\r\n\r\nexport const selectLineY2 = state => state.line.y2;\r\n\r\nexport const selectLineIsFailed = state => state.line.isFailed;\r\n\r\nexport const selectLineIsLoading = state => state.line.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {setLineRequest} from './line.actions';\r\nimport {LineComponent} from './line.component';\r\nimport {selectLineIsFailed, selectLineIsLoading} from './line.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    canvasHeight: selectCanvasHeight(state),\r\n    canvasWidth: selectCanvasWidth(state),\r\n    isFailed: selectLineIsFailed(state),\r\n    isLoading: selectLineIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setLineRequest: bindActionCreators(setLineRequest, dispatch)\r\n});\r\n\r\nexport const Line = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LineComponent);\r\n","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\n\r\nexport function LineComponent({\r\n                                  canvasHeight,\r\n                                  canvasWidth,\r\n                                  handleNext,\r\n                                  setLineRequest\r\n                              }) {\r\n    const [x1, setX1] = useState(0);\r\n    const [x2, setX2] = useState(0);\r\n    const [y1, setY1] = useState(0);\r\n    const [y2, setY2] = useState(0);\r\n    const [isX1Valid, setIsX1Valid] = useState(true);\r\n    const [isY1Valid, setIsY1Valid] = useState(true);\r\n    const [isX2Valid, setIsX2Valid] = useState(true);\r\n    const [isY2Valid, setIsY2Valid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isX1Valid = x1 && x1 > 0 && x1 <= canvasWidth;\r\n        const isY1Valid = y1 && y1 > 0 && y1 <= canvasHeight;\r\n        const isX2Valid = x2 && x2 > 0 && x2 <= canvasWidth;\r\n        const isY2Valid = y2 && y2 > 0 && y2 <= canvasHeight;\r\n        setIsX1Valid(isX1Valid);\r\n        setIsY1Valid(isY1Valid);\r\n        setIsX2Valid(isX2Valid);\r\n        setIsY2Valid(isY2Valid);\r\n\r\n        return isX1Valid && isX2Valid && isY1Valid && isY2Valid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setLineRequest({x1, y1, x2, y2});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint xCoordinate\"\r\n                        name=\"x1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x1}\r\n                        onChange={val => setX1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isX1Valid}\r\n                        helperText={!isX1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint yCoordinate\"\r\n                        name=\"y1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y1}\r\n                        onChange={val => setY1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isY1Valid}\r\n                        helperText={!isY1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint xCoordinate\"\r\n                        name=\"x2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x2}\r\n                        onChange={val => setX2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isX2Valid}\r\n                        helperText={!isX2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint yCoordinate\"\r\n                        name=\"y2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y2}\r\n                        onChange={val => setY2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isY2Valid}\r\n                        helperText={!isY2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nLineComponent.propTypes = {\r\n    canvasHeight: PropTypes.number.isRequired,\r\n    canvasWidth: PropTypes.number.isRequired,\r\n    handleNext: PropTypes.func.isRequired,\r\n    setLineRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_LINE_FAILURE, SET_LINE_REQUEST, SET_LINE_SUCCESS} from './line.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 0,\r\n    y2: 0,\r\n};\r\n\r\nexport const lineReducer = handleActions({\r\n    [SET_LINE_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_LINE_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_LINE_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            x1: payload.x1,\r\n            y1: payload.y1,\r\n            x2: payload.x2,\r\n            y2: payload.y2,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_LINE_REQUEST, setLineFailure, setLineSuccess} from './line.actions';\r\n\r\nfunction* validateLineSaga({x1, y1, x2, y2}) {\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    // TODO check if in canvas area\r\n    return true;\r\n}\r\n\r\nfunction* setLineSaga() {\r\n    const {payload} = yield take(SET_LINE_REQUEST);\r\n    const isValid = yield call(validateLineSaga, payload);\r\n    isValid ? yield put(setLineSuccess(payload)) : yield put(setLineFailure());\r\n}\r\n\r\nexport function* lineSaga() {\r\n    yield fork(setLineSaga);\r\n}\r\n","export const SET_RECTANGLE_REQUEST = 'SET_RECTANGLE_REQUEST';\r\nexport const setRectangleRequest = payload => ({type: SET_RECTANGLE_REQUEST, payload});\r\n\r\nexport const SET_RECTANGLE_SUCCESS = 'SET_RECTANGLE_SUCCESS';\r\nexport const setRectangleSuccess = payload => ({type: SET_RECTANGLE_SUCCESS, payload});\r\n\r\nexport const SET_RECTANGLE_FAILURE = 'SET_RECTANGLE_FAILURE';\r\nexport const setRectangleFailure = () => ({type: SET_RECTANGLE_FAILURE});\r\n","export const selectRectangle = state => ({\r\n    x1: state.rectangle.x1,\r\n    y1: state.rectangle.y1,\r\n    x2: state.rectangle.x2,\r\n    y2: state.rectangle.y2\r\n});\r\n\r\nexport const selectRectangleX1 = state => state.rectangle.x1;\r\n\r\nexport const selectRectangleY1 = state => state.rectangle.y1;\r\n\r\nexport const selectRectangleX2 = state => state.rectangle.x2;\r\n\r\nexport const selectRectangleY2 = state => state.rectangle.y2;\r\n\r\nexport const selectRectangleIsFailed = state => state.rectangle.isFailed;\r\n\r\nexport const selectRectangleIsLoading = state => state.rectangle.isLoading;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {setRectangleRequest} from './rectangle.actions';\r\nimport {RectangleComponent} from './rectangle.component';\r\nimport {selectRectangleIsFailed, selectRectangleIsLoading} from './rectangle.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    canvasHeight: selectCanvasHeight(state),\r\n    canvasWidth: selectCanvasWidth(state),\r\n    isFailed: selectRectangleIsFailed(state),\r\n    isLoading: selectRectangleIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRectangleRequest: bindActionCreators(setRectangleRequest, dispatch)\r\n});\r\n\r\nexport const Rectangle = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RectangleComponent);\r\n","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\n\r\nexport function RectangleComponent({\r\n                                       canvasHeight,\r\n                                       canvasWidth,\r\n                                       handleNext,\r\n                                       setRectangleRequest\r\n                                   }) {\r\n    const [rx1, setRx1] = useState(0);\r\n    const [rx2, setRx2] = useState(0);\r\n    const [ry1, setRy1] = useState(0);\r\n    const [ry2, setRy2] = useState(0);\r\n    const [isRx1Valid, setIsRx1Valid] = useState(true);\r\n    const [isRy1Valid, setIsRy1Valid] = useState(true);\r\n    const [isRx2Valid, setIsRx2Valid] = useState(true);\r\n    const [isRy2Valid, setIsRy2Valid] = useState(true);\r\n\r\n    const onValidate = () => {\r\n        const isRx1Valid = rx1 && rx1 > 0 && rx1 <= canvasWidth;\r\n        const isRy1Valid = ry1 && ry1 > 0 && ry1 <= canvasHeight;\r\n        const isRx2Valid = rx2 && rx2 > 0 && rx2 <= canvasWidth;\r\n        const isRy2Valid = ry2 && ry2 > 0 && ry2 <= canvasHeight;\r\n        setIsRx1Valid(isRx1Valid);\r\n        setIsRy1Valid(isRy1Valid);\r\n        setIsRx2Valid(isRx2Valid);\r\n        setIsRy2Valid(isRy2Valid);\r\n\r\n        return isRx1Valid && isRx2Valid && isRy1Valid && isRy2Valid;\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        const isValid = onValidate();\r\n        if (isValid) {\r\n            setRectangleRequest({x1: rx1, y1: ry1, x2: rx2, y2: ry2});\r\n            handleNext();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint xCoordinate\"\r\n                        name=\"rx1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={rx1}\r\n                        onChange={val => setRx1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRx1Valid}\r\n                        helperText={!isRx1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint yCoordinate\"\r\n                        name=\"ry1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={ry1}\r\n                        onChange={val => setRy1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRy1Valid}\r\n                        helperText={!isRy1Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint xCoordinate\"\r\n                        name=\"rx2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={rx2}\r\n                        onChange={val => setRx2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRx2Valid}\r\n                        helperText={!isRx2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint yCoordinate\"\r\n                        name=\"ry2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={ry2}\r\n                        onChange={val => setRy2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!isRy2Valid}\r\n                        helperText={!isRy2Valid && validationMessages.coordinatesFieldRule}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{display: 'flex', marginTop: 20, justifyContent: 'flex-end'}}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nRectangleComponent.propTypes = {\r\n    canvasHeight: PropTypes.number.isRequired,\r\n    canvasWidth: PropTypes.number.isRequired,\r\n    handleNext: PropTypes.func.isRequired,\r\n    setRectangleRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_RECTANGLE_FAILURE, SET_RECTANGLE_REQUEST, SET_RECTANGLE_SUCCESS} from './rectangle.actions';\r\n\r\nexport const initialState = {\r\n    isFailed: false,\r\n    isLoading: false,\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 0,\r\n    y2: 0\r\n};\r\n\r\nexport const rectangleReducer = handleActions({\r\n    [SET_RECTANGLE_FAILURE]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: true,\r\n            isLoading: false\r\n        }),\r\n    [SET_RECTANGLE_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            isFailed: false,\r\n            isLoading: true\r\n        }),\r\n    [SET_RECTANGLE_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            x1: payload.x1,\r\n            y1: payload.y1,\r\n            x2: payload.x2,\r\n            y2: payload.y2,\r\n            isFailed: false,\r\n            isLoading: false\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_RECTANGLE_REQUEST, setRectangleFailure, setRectangleSuccess} from './rectangle.actions';\r\n\r\nfunction* validateRectangleSaga({x1, y1, x2, y2}) {\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    // TODO check if in canvas area\r\n    // TODO check if no cross with line\r\n    return true;\r\n}\r\n\r\nfunction* setRectangleSaga() {\r\n    const {payload} = yield take(SET_RECTANGLE_REQUEST);\r\n    const isValid = yield call(validateRectangleSaga, payload);\r\n    isValid ? yield put(setRectangleSuccess(payload)) : yield put(setRectangleFailure());\r\n}\r\n\r\nexport function* rectangleSaga() {\r\n    yield fork(setRectangleSaga);\r\n}\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {selectCanvas} from '../applets/canvas';\r\nimport {selectFill} from '../applets/fill';\r\nimport {selectLine} from '../applets/line';\r\nimport {selectRectangle} from '../applets/rectangle';\r\nimport {fillBoard, getBoard, getLineCoordinates, getRectangleCoordinates} from '../helpers/board.helper';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        margin: '1em auto'\r\n    },\r\n    td: {\r\n        border: '1px solid #DDD',\r\n        height: '1em',\r\n        width: '1em'\r\n    },\r\n    figure: {\r\n        backgroundColor: '#3f51b5'\r\n    }\r\n});\r\n\r\nfunction BoardComponent({\r\n                         canvas,\r\n                         fill,\r\n                         line,\r\n                         rectangle,\r\n                         classes\r\n                     }) {\r\n    const lineCoordinates = getLineCoordinates(line);\r\n    const rectangleCoordinates = getRectangleCoordinates(rectangle);\r\n    const [board, setBoard] = useState(getBoard(canvas.height, canvas.width, lineCoordinates, rectangleCoordinates));\r\n    return (\r\n        <table className={classes.table}>\r\n            <tbody>\r\n            {\r\n                board.map((row, i) =>\r\n                    <tr key={i}>\r\n                        {\r\n                            row.map((cell, j) =>\r\n                                <td\r\n                                    key={j}\r\n                                    onClick={() => {\r\n                                        setBoard([]);\r\n                                        setTimeout(() => {\r\n                                            setBoard(fillBoard(board, i, j))\r\n                                        }, 0)\r\n                                    }}\r\n                                    className={classNames(classes.td, {\r\n                                        [classes.figure]: cell.value === 1\r\n                                    })}\r\n                                    style={{backgroundColor: cell.value === 2 && fill.color}}\r\n                                />)\r\n                        }\r\n                    </tr>)\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nBoardComponent.propTypes = {\r\n    canvas: PropTypes.object.isRequired,\r\n    fill: PropTypes.object.isRequired,\r\n    line: PropTypes.object.isRequired,\r\n    rectangle: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n    canvas: selectCanvas(state),\r\n    fill: selectFill(state),\r\n    line: selectLine(state),\r\n    rectangle: selectRectangle(state)\r\n});\r\n\r\nexport const Board = connect(\r\n    mapStateToProps,\r\n    null\r\n)(withStyles(styles)(BoardComponent));\r\n","export const fillBoard = (board, x, y) => {\r\n    let newBoard = board;\r\n    if (newBoard[x] && newBoard[x][y] && newBoard[x][y].value === 0) {\r\n        newBoard[x][y].value = 2;\r\n        newBoard = fillBoard(newBoard, x - 1, y);\r\n        newBoard = fillBoard(newBoard, x + 1, y);\r\n        newBoard = fillBoard(newBoard, x, y - 1);\r\n        newBoard = fillBoard(newBoard, x, y + 1);\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nexport const getBoard = (height, width, lineCoordinates, rectangleCoordinates) => {\r\n    const board = [];\r\n    for (let i = 0; i < height; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < width; j++) {\r\n            row.push({value: 0});\r\n        }\r\n        board.push(row);\r\n    }\r\n    [...lineCoordinates, ...rectangleCoordinates].forEach(([x, y]) => {\r\n        board[y][x].value = 1;\r\n    });\r\n    return board;\r\n};\r\n\r\nexport const getLineCoordinates = line => {\r\n    const {x1, y1, x2, y2} = line;\r\n    const isHorizontal = x1 !== x2;\r\n    const startPoint = isHorizontal ? x1 - 1 : y1 - 1;\r\n    const endPoint = isHorizontal ? x2 : y2;\r\n    const coordinates = [];\r\n    for (let i = startPoint; i < endPoint; i++) {\r\n        coordinates.push(isHorizontal ? [i, startPoint] : [startPoint, i]);\r\n    }\r\n    return coordinates\r\n};\r\n\r\nexport const getRectangleCoordinates = rectangle => {\r\n    const {x1, y1, x2, y2} = rectangle;\r\n    const coordinates = [];\r\n    for (let i = x1 - 1; i < x2; i++) {\r\n        coordinates.push([i, y1 - 1], [i, y2 - 1]);\r\n    }\r\n    for (let i = y1; i < y2; i++) {\r\n        coordinates.push([x1 - 1, i], [x2 - 1, i]);\r\n    }\r\n    return coordinates;\r\n};\r\n","import React, {useState} from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Canvas} from '../applets/canvas';\r\nimport {Fill} from '../applets/fill';\r\nimport {Line} from '../applets/line';\r\nimport {Rectangle} from '../applets/rectangle';\r\n\r\nconst styles = () => ({\r\n    stepper: {\r\n        paddingTop: 30,\r\n        paddingBottom: 50\r\n    }\r\n});\r\n\r\nconst labelsOfSteps = ['Canvas', 'Line', 'Rectangle', 'Bucket Fill'];\r\n\r\nconst SettingsComponent = ({classes, onSubmit}) => {\r\n    const [steps, setSteps] = useState(0);\r\n\r\n    const handleNext = () => setSteps(steps + 1);\r\n\r\n    const handleSteps = step => ({\r\n        0: <Canvas handleNext={handleNext}/>,\r\n        1: <Line handleNext={handleNext}/>,\r\n        2: <Rectangle handleNext={handleNext}/>,\r\n        3: <Fill handleNext={handleNext}/>\r\n    }[step]);\r\n\r\n    if (steps === labelsOfSteps.length) onSubmit();\r\n    return (\r\n        <>\r\n            <Stepper activeStep={steps} className={classes.stepper} alternativeLabel>\r\n                {\r\n                    labelsOfSteps.map(label => (<Step key={label}><StepLabel>{label}</StepLabel></Step>))\r\n                }\r\n            </Stepper>\r\n            {handleSteps(steps)}\r\n        </>\r\n    )\r\n};\r\n\r\nSettingsComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport const Settings = withStyles(styles)(SettingsComponent);\r\n","import React, {useState} from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport {Header} from './components/header.component';\nimport {Board} from './screens/board.screen';\nimport {Settings} from './screens/settings.screen';\nimport './App.css';\n\nconst styles = theme => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 1000,\n            marginLeft: 'auto',\n            marginRight: 'auto'\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(8),\n            marginBottom: theme.spacing(8),\n            padding: theme.spacing(3)\n        }\n    }\n});\n\nfunction AppComponent({classes}) {\n    const [isAllSettingsAvailable, setSettings] = useState(false);\n    return (\n        <div className=\"App\">\n            <CssBaseline/>\n            <Header/>\n            <main className={classes.layout}>\n                <Paper className={classes.paper}>\n                    {isAllSettingsAvailable ? <Board/> : <Settings onSubmit={() => setSettings(true)}/>}\n                </Paper>\n            </main>\n        </div>\n    );\n}\n\nAppComponent.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport const App = withStyles(styles)(AppComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\r\n\r\nimport {canvasReducer} from '../applets/canvas';\r\nimport {fillReducer} from '../applets/fill';\r\nimport {lineReducer} from '../applets/line';\r\nimport {rectangleReducer} from '../applets/rectangle';\r\n\r\nexport const rootReducer = combineReducers({\r\n    canvas: canvasReducer,\r\n    fill: fillReducer,\r\n    line: lineReducer,\r\n    rectangle: rectangleReducer\r\n});\r\n","import {all} from 'redux-saga/effects'\r\n\r\nimport {canvasSaga} from '../applets/canvas';\r\nimport {fillSaga} from '../applets/fill';\r\nimport {lineSaga} from '../applets/line';\r\nimport {rectangleSaga} from '../applets/rectangle';\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        canvasSaga(),\r\n        fillSaga(),\r\n        lineSaga(),\r\n        rectangleSaga()\r\n    ]);\r\n}\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport {rootReducer} from './reducers'\r\nimport {rootSaga} from './saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = applyMiddleware(sagaMiddleware);\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(middleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}