{"version":3,"sources":["App.constants.js","components/header.component.js","applets/canvas/canvas.actions.js","components/submit.component.js","components/toast.component.js","applets/canvas/canvas.selectors.js","applets/canvas/canvas.container.js","applets/canvas/canvas.component.js","applets/canvas/canvas.reducer.js","applets/canvas/canvas.saga.js","applets/fill/fill.actions.js","applets/fill/fill.selectors.js","applets/fill/fill.container.js","applets/fill/fill.component.js","applets/fill/fill.reducer.js","applets/fill/fill.saga.js","applets/line/line.actions.js","applets/line/line.selectors.js","applets/line/line.container.js","applets/line/line.component.js","applets/line/line.reducer.js","applets/line/line.saga.js","applets/rectangle/rectangle.actions.js","applets/rectangle/rectangle.selectors.js","applets/rectangle/rectangle.container.js","applets/rectangle/rectangle.component.js","applets/rectangle/rectangle.reducer.js","applets/rectangle/rectangle.saga.js","screens/board.screen.js","helpers/board.helper.js","screens/settings.screen.js","App.js","serviceWorker.js","store/reducers.js","store/saga.js","store/index.js","index.js"],"names":["validationMessages","canvasHeight","canvasWidth","invalidColor","fillHeightRule","fillWidthRule","point1IsOutOfCanvas","point2IsOutOfCanvas","pointsAreEqual","requiredField","shouldBeEqualByXYCoordinates","shouldNotBeEqualByXYCoordinates","somethingWentWrong","messages","Header","withStyles","appBar","position","iconMargin","marginLeft","classes","AppBar","className","Toolbar","Typography","variant","noWrap","IconButton","color","aria-label","Link","href","target","title","setCanvasRequest","payload","type","setCanvasSuccess","setCanvasFailure","Submit","wrapper","display","marginTop","justifyContent","addBtn","marginRight","nextDisabled","onNext","onSubmit","submitDisabled","Button","onClick","disabled","Toast","message","Snackbar","open","severity","selectCanvas","state","height","canvas","width","selectCanvasErrorMessage","errorMessage","selectCanvasHeight","selectCanvasIsLoading","isLoading","selectCanvasIsSuccess","isSuccess","selectCanvasWidth","Canvas","connect","dispatch","bindActionCreators","handleNext","useState","setWidth","setHeight","LinearProgress","Grid","container","item","xs","TextField","fullWidth","label","name","placeholder","defaultValue","onChange","val","value","margin","required","error","helperText","canvasReducer","handleActions","setCanvasSaga","canvasSaga","validateCanvasSaga","take","put","fork","setFillRequest","setFillSuccess","setFillFailure","selectFill","fill","selectFillErrorMessage","selectFillIsSuccess","selectFillIsLoading","Fill","setColor","fillReducer","validateFillSaga","setFillSaga","fillSaga","select","match","call","setLineRequest","setLineSuccess","setLineFailure","selectLines","line","entities","selectLineErrorMessage","selectLineIsLoading","selectLineIsSuccess","Line","x1","setX1","x2","setX2","y1","setY1","y2","setY2","lineReducer","validateLineSaga","setLineSaga","lineSaga","setRectangleRequest","setRectangleSuccess","setRectangleFailure","selectRectangles","rectangle","selectRectangleErrorMessage","selectRectangleIsLoading","selectRectangleIsSuccess","Rectangle","rectangleReducer","validateRectangleSaga","setRectangleSaga","rectangleSaga","Board","lines","rectangles","table","td","border","figure","backgroundColor","linesCoordinates","coordinates","i","length","isHorizontal","startPoint","endPoint","push","getLinesCoordinates","rectanglesCoordinates","getRectanglesCoordinates","lineCoordinates","rectangleCoordinates","board","row","j","forEach","x","y","getBoard","setBoard","map","key","cell","setTimeout","fillBoard","newBoard","classNames","style","labelsOfSteps","Settings","stepper","paddingTop","paddingBottom","step","steps","setSteps","Stepper","activeStep","alternativeLabel","Step","StepLabel","0","1","2","3","App","theme","layout","spacing","breakpoints","up","paper","marginBottom","padding","isAllSettingsAvailable","setSettings","CssBaseline","Paper","Boolean","window","location","hostname","rootReducer","combineReducers","rootSaga","all","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","store","createStore","composeWithDevTools","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e997b593.chunk.js","sourcesContent":["export const minCanvasHeight = 20;\r\nexport const minCanvasWidth = 20;\r\nexport const maxCanvasHeight = 100;\r\nexport const maxCanvasWidth = 100;\r\n\r\nexport const defaultFillColor = '#f44336';\r\nexport const minFillHeight = 1;\r\nexport const minFillWidth = 1;\r\n\r\nexport const defaultLineX1 = 1;\r\nexport const defaultLineX2 = 1;\r\nexport const defaultLineY1 = 1;\r\nexport const defaultLineY2 = 4;\r\n\r\nexport const defaultRectangleX1 = 3;\r\nexport const defaultRectangleX2 = 7;\r\nexport const defaultRectangleY1 = 3;\r\nexport const defaultRectangleY2 = 7;\r\n\r\nexport const projectTitle = 'Simple Paint';\r\nexport const githubUrl = 'http://github.com/bekstoro/simple-paint';\r\n\r\nexport const validationMessages = {\r\n    canvasHeight: `Height is required field, it should be greater than ${minCanvasHeight} and less than ${maxCanvasHeight}`,\r\n    canvasWidth: `Width is required field, it should be greater than ${minCanvasWidth} and less than ${maxCanvasWidth}`,\r\n    invalidColor: 'Invalid color',\r\n    fillHeightRule: (canvasHeight) => `Height is required field, it should be greater than 0 and less than canvas height: ${canvasHeight}`,\r\n    fillWidthRule: (canvasWidth) => `Width is required field, it should be greater than 0 and less than canvas width: ${canvasWidth}`,\r\n    point1IsOutOfCanvas: 'Point 1 is out of canvas',\r\n    point2IsOutOfCanvas: 'Point 2 is out of canvas',\r\n    pointsAreEqual: 'Points are equal',\r\n    requiredField: 'This field is required',\r\n    shouldBeEqualByXYCoordinates: 'Should be equal by X or Y coordinates',\r\n    shouldNotBeEqualByXYCoordinates: 'Should not be equal by X or Y coordinates',\r\n    somethingWentWrong: 'Something went wrong'\r\n};\r\n\r\nexport const messages = {\r\n    newLineAdded: 'New line is added',\r\n    newRectangleAdded: 'New rectangle is added'\r\n};\r\n","import React from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from '@material-ui/core/Link';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GithubIcon from '@material-ui/icons/GitHub'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {githubUrl, projectTitle} from '../App.constants';\r\n\r\nconst styles = () => ({\r\n    appBar: {\r\n        position: 'relative'\r\n    },\r\n    iconMargin: {\r\n        marginLeft: 'auto'\r\n    }\r\n});\r\n\r\nconst HeaderComponent = ({classes}) =>\r\n    <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n            <Typography variant=\"h6\" noWrap>{projectTitle}</Typography>\r\n            <IconButton color=\"inherit\" aria-label=\"Github\" className={classes.iconMargin}>\r\n                <Link\r\n                    href={githubUrl}\r\n                    target=\"_blank\"\r\n                    title=\"Github\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <GithubIcon/>\r\n                </Link>\r\n            </IconButton>\r\n        </Toolbar>\r\n    </AppBar>;\r\n\r\nHeaderComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport const Header = withStyles(styles)(HeaderComponent);\r\n","export const SET_CANVAS_REQUEST = 'SET_CANVAS_REQUEST';\r\nexport const setCanvasRequest = payload => ({type: SET_CANVAS_REQUEST, payload});\r\n\r\nexport const SET_CANVAS_SUCCESS = 'SET_CANVAS_SUCCESS';\r\nexport const setCanvasSuccess = payload => ({type: SET_CANVAS_SUCCESS, payload});\r\n\r\nexport const SET_CANVAS_FAILURE = 'SET_CANVAS_FAILURE';\r\nexport const setCanvasFailure = payload => ({type: SET_CANVAS_FAILURE, payload});\r\n","import React from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = () => ({\r\n    wrapper: {\r\n        display: 'flex',\r\n        marginTop: 20,\r\n        justifyContent: 'flex-end'\r\n    },\r\n    addBtn: {\r\n        marginRight: '1em'\r\n    }\r\n});\r\n\r\nconst SubmitComponent = ({\r\n                             classes,\r\n                             nextDisabled,\r\n                             onNext,\r\n                             onSubmit,\r\n                             submitDisabled\r\n                         }) =>\r\n    <div className={classes.wrapper}>\r\n        {\r\n            onSubmit &&\r\n            <Button className={classes.addBtn}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onSubmit}\r\n                    disabled={submitDisabled}>Add</Button>\r\n        }\r\n        {\r\n            onNext &&\r\n            <Button variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onNext}\r\n                    disabled={submitDisabled || nextDisabled}>Next</Button>\r\n        }\r\n    </div>;\r\n\r\nSubmitComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    nextDisabled: PropTypes.bool,\r\n    onNext: PropTypes.func.isRequired,\r\n    onSubmit: PropTypes.func,\r\n    submitDisabled: PropTypes.bool\r\n};\r\n\r\nexport const Submit = withStyles(styles)(SubmitComponent);\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {validationMessages} from '../App.constants';\r\n\r\nexport function Toast({\r\n                          message = validationMessages.somethingWentWrong,\r\n                          type = 'error'\r\n                      }) {\r\n    return (\r\n        <Snackbar open={!!message}>\r\n            <MuiAlert variant=\"filled\" severity={type}>\r\n                {message}\r\n            </MuiAlert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\nToast.propTypes = {\r\n    message: PropTypes.string\r\n};\r\n","export const selectCanvas = state => ({height: state.canvas.height, width: state.canvas.width});\r\n\r\nexport const selectCanvasErrorMessage = state => state.canvas.errorMessage;\r\n\r\nexport const selectCanvasHeight = state => state.canvas.height;\r\n\r\nexport const selectCanvasIsLoading = state => state.canvas.isLoading;\r\n\r\nexport const selectCanvasIsSuccess = state => state.canvas.isSuccess;\r\n\r\nexport const selectCanvasWidth = state => state.canvas.width;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setCanvasRequest} from './canvas.actions';\r\nimport {CanvasComponent} from './canvas.component';\r\nimport {selectCanvasErrorMessage, selectCanvasIsLoading, selectCanvasIsSuccess} from './canvas.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectCanvasErrorMessage(state),\r\n    isLoading: selectCanvasIsLoading(state),\r\n    isSuccess: selectCanvasIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCanvasRequest: bindActionCreators(setCanvasRequest, dispatch)\r\n});\r\n\r\nexport const Canvas = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CanvasComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {minCanvasHeight, minCanvasWidth, validationMessages} from '../../App.constants';\r\n\r\nexport function CanvasComponent({\r\n                                    errorMessage,\r\n                                    handleNext,\r\n                                    isLoading,\r\n                                    isSuccess,\r\n                                    setCanvasRequest\r\n                                }) {\r\n    const [width, setWidth] = useState(minCanvasWidth);\r\n    const [height, setHeight] = useState(minCanvasHeight);\r\n\r\n    if (isSuccess) handleNext();\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!width}\r\n                        helperText={!width && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!height}\r\n                        helperText={!height && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onNext={() => setCanvasRequest({width, height})} nextDisabled={!width || !height}/>\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setCanvasRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_CANVAS_FAILURE, SET_CANVAS_REQUEST, SET_CANVAS_SUCCESS} from './canvas.actions';\r\n\r\nexport const initialState = {\r\n    errorMessage: '',\r\n    height: 0,\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    width: 0\r\n};\r\n\r\nexport const canvasReducer = handleActions({\r\n    [SET_CANVAS_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_CANVAS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_CANVAS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            errorMessage: '',\r\n            height: payload.height,\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            width: payload.width\r\n        })\r\n}, initialState);\r\n","import {fork, put, take} from 'redux-saga/effects';\r\n\r\nimport {\r\n    maxCanvasHeight,\r\n    maxCanvasWidth,\r\n    minCanvasHeight,\r\n    minCanvasWidth,\r\n    validationMessages\r\n} from '../../App.constants';\r\nimport {SET_CANVAS_REQUEST, setCanvasFailure, setCanvasSuccess} from './canvas.actions';\r\n\r\nconst validateCanvasSaga = ({width, height}) => {\r\n    if (!width || width < minCanvasWidth || width > maxCanvasWidth) return validationMessages.canvasWidth;\r\n    if (!height || height < minCanvasHeight || height > maxCanvasHeight) return validationMessages.canvasHeight;\r\n};\r\n\r\nexport function* setCanvasSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_CANVAS_REQUEST);\r\n        const errorMessage = validateCanvasSaga(payload);\r\n        errorMessage ? yield put(setCanvasFailure(errorMessage)) : yield put(setCanvasSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* canvasSaga() {\r\n    yield fork(setCanvasSaga);\r\n}\r\n","export const SET_FILL_REQUEST = 'SET_FILL_REQUEST';\r\nexport const setFillRequest = payload => ({type: SET_FILL_REQUEST, payload});\r\n\r\nexport const SET_FILL_SUCCESS = 'SET_FILL_SUCCESS';\r\nexport const setFillSuccess = payload => ({type: SET_FILL_SUCCESS, payload});\r\n\r\nexport const SET_FILL_FAILURE = 'SET_FILL_FAILURE';\r\nexport const setFillFailure = payload => ({type: SET_FILL_FAILURE, payload});\r\n","export const selectFill = state => ({height: state.fill.height, width: state.fill.width, color: state.fill.color});\r\n\r\nexport const selectFillColor = state => state.fill.color;\r\n\r\nexport const selectFillErrorMessage = state => state.fill.errorMessage;\r\n\r\nexport const selectFillHeight = state => state.fill.height;\r\n\r\nexport const selectFillIsSuccess = state => state.fill.isSuccess;\r\n\r\nexport const selectFillIsLoading = state => state.fill.isLoading;\r\n\r\nexport const selectFillWidth = state => state.fill.width;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setFillRequest} from './fill.actions';\r\nimport {FillComponent} from './fill.component';\r\nimport {selectFillErrorMessage, selectFillIsLoading, selectFillIsSuccess} from './fill.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectFillErrorMessage(state),\r\n    isLoading: selectFillIsLoading(state),\r\n    isSuccess: selectFillIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFillRequest: bindActionCreators(setFillRequest, dispatch)\r\n});\r\n\r\nexport const Fill = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(FillComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {defaultFillColor, minFillHeight, minFillWidth, validationMessages} from '../../App.constants';\r\n\r\nexport function FillComponent({\r\n                                  errorMessage,\r\n                                  handleNext,\r\n                                  isLoading,\r\n                                  isSuccess,\r\n                                  setFillRequest\r\n                              }) {\r\n    const [width, setWidth] = useState(minFillWidth);\r\n    const [height, setHeight] = useState(minFillHeight);\r\n    const [color, setColor] = useState(defaultFillColor);\r\n\r\n    if (isSuccess) handleNext();\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!width}\r\n                        helperText={!width && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!height}\r\n                        helperText={!height && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Color\"\r\n                        name=\"color\"\r\n                        placeholder=\"Set color\"\r\n                        defaultValue={color}\r\n                        onChange={val => setColor(val.target.value)}\r\n                        margin=\"normal\"\r\n                        required\r\n                        error={!color}\r\n                        helperText={!color && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onNext={() => setFillRequest({width, height, color})} nextDisabled={!width || !height || !color}/>\r\n        </>\r\n    )\r\n}\r\n\r\nFillComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setFillRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_FILL_FAILURE, SET_FILL_REQUEST, SET_FILL_SUCCESS} from './fill.actions';\r\n\r\nexport const initialState = {\r\n    color: '',\r\n    errorMessage: '',\r\n    height: 0,\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    width: 0\r\n};\r\n\r\nexport const fillReducer = handleActions({\r\n    [SET_FILL_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_FILL_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_FILL_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            color: payload.color,\r\n            errorMessage: '',\r\n            height: payload.height,\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            width: payload.width\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_FILL_REQUEST, setFillFailure, setFillSuccess} from './fill.actions';\r\n\r\nfunction* validateFillSaga({width, height, color}) {\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    if (!width || width < 0 || width > canvasWidth) return validationMessages.fillWidthRule(canvasWidth);\r\n    if (!height || height < 0 || height > canvasHeight) return validationMessages.fillHeightRule(canvasHeight);\r\n    if (!color.match( /#[a-f0-9]{6}/gi )) return validationMessages.invalidColor;\r\n}\r\n\r\nexport function* setFillSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_FILL_REQUEST);\r\n        const errorMessage = yield call(validateFillSaga, payload);\r\n        errorMessage ? yield put(setFillFailure(errorMessage)) : yield put(setFillSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* fillSaga() {\r\n    yield fork(setFillSaga);\r\n}\r\n","export const SET_LINE_REQUEST = 'SET_LINE_REQUEST';\r\nexport const setLineRequest = payload => ({type: SET_LINE_REQUEST, payload});\r\n\r\nexport const SET_LINE_SUCCESS = 'SET_LINE_SUCCESS';\r\nexport const setLineSuccess = payload => ({type: SET_LINE_SUCCESS, payload});\r\n\r\nexport const SET_LINE_FAILURE = 'SET_LINE_FAILURE';\r\nexport const setLineFailure = payload => ({type: SET_LINE_FAILURE, payload});\r\n","export const selectLines = state => state.line.entities;\r\n\r\nexport const selectLineErrorMessage = state => state.line.errorMessage;\r\n\r\nexport const selectLineIsLoading = state => state.line.isLoading;\r\n\r\nexport const selectLineIsSuccess = state => state.line.isSuccess;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setLineRequest} from './line.actions';\r\nimport {LineComponent} from './line.component';\r\nimport {selectLineErrorMessage, selectLineIsLoading, selectLineIsSuccess} from './line.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectLineErrorMessage(state),\r\n    isLoading: selectLineIsLoading(state),\r\n    isSuccess: selectLineIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setLineRequest: bindActionCreators(setLineRequest, dispatch)\r\n});\r\n\r\nexport const Line = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LineComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {\r\n    defaultLineX1,\r\n    defaultLineX2,\r\n    defaultLineY1,\r\n    defaultLineY2,\r\n    messages,\r\n    validationMessages\r\n} from '../../App.constants';\r\n\r\nexport function LineComponent({\r\n                                  errorMessage,\r\n                                  handleNext,\r\n                                  isLoading,\r\n                                  isSuccess,\r\n                                  setLineRequest\r\n                              }) {\r\n    const [x1, setX1] = useState(defaultLineX1);\r\n    const [x2, setX2] = useState(defaultLineX2);\r\n    const [y1, setY1] = useState(defaultLineY1);\r\n    const [y2, setY2] = useState(defaultLineY2);\r\n\r\n    const onNext = () => {\r\n        if (isSuccess) handleNext();\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        setLineRequest({x1, y1, x2, y2});\r\n    };\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isSuccess && <Toast message={messages.newLineAdded} type=\"success\"/>\r\n            }\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint xCoordinate\"\r\n                        name=\"x1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x1}\r\n                        onChange={val => setX1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x1}\r\n                        helperText={!x1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint yCoordinate\"\r\n                        name=\"y1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y1}\r\n                        onChange={val => setY1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y1}\r\n                        helperText={!y1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint xCoordinate\"\r\n                        name=\"x2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x2}\r\n                        onChange={val => setX2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x2}\r\n                        helperText={!x2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint yCoordinate\"\r\n                        name=\"y2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y2}\r\n                        onChange={val => setY2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y2}\r\n                        helperText={!y2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onNext={onNext}\r\n                    onSubmit={onSubmit}\r\n                    nextDisabled={!isSuccess}\r\n                    submitDisabled={!x1 || !x2 || !y1 || !y2}/>\r\n        </>\r\n    )\r\n}\r\n\r\nLineComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setLineRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_LINE_FAILURE, SET_LINE_REQUEST, SET_LINE_SUCCESS} from './line.actions';\r\n\r\nexport const initialState = {\r\n    errorMessage: '',\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    entities: []\r\n};\r\n\r\nexport const lineReducer = handleActions({\r\n    [SET_LINE_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_LINE_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_LINE_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            errorMessage: '',\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            entities: [\r\n                ...state.entities,\r\n                {\r\n                    x1: payload.x1,\r\n                    x2: payload.x2,\r\n                    y1: payload.y1,\r\n                    y2: payload.y2\r\n                }\r\n            ]\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_LINE_REQUEST, setLineFailure, setLineSuccess} from './line.actions';\r\n\r\nfunction* validateLineSaga({x1, y1, x2, y2}) {\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    if (!x1 || !y1 || x1 < 0 || x1 > canvasWidth || y1 < 0 || y1 > canvasHeight) return validationMessages.point1IsOutOfCanvas;\r\n    if (!x2 || !y2 || x2 < 0 || x2 > canvasWidth || y2 < 0 || y2 > canvasHeight) return validationMessages.point2IsOutOfCanvas;\r\n    if (x1 === x2 && y1 === y2) return validationMessages.pointsAreEqual;\r\n    if (x1 !== x2 && y1 !== y2) return validationMessages.shouldBeEqualByXYCoordinates;\r\n}\r\n\r\nexport function* setLineSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_LINE_REQUEST);\r\n        const errorMessage = yield call(validateLineSaga, payload);\r\n        errorMessage ? yield put(setLineFailure(errorMessage)) : yield put(setLineSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* lineSaga() {\r\n    yield fork(setLineSaga);\r\n}\r\n","export const SET_RECTANGLE_REQUEST = 'SET_RECTANGLE_REQUEST';\r\nexport const setRectangleRequest = payload => ({type: SET_RECTANGLE_REQUEST, payload});\r\n\r\nexport const SET_RECTANGLE_SUCCESS = 'SET_RECTANGLE_SUCCESS';\r\nexport const setRectangleSuccess = payload => ({type: SET_RECTANGLE_SUCCESS, payload});\r\n\r\nexport const SET_RECTANGLE_FAILURE = 'SET_RECTANGLE_FAILURE';\r\nexport const setRectangleFailure = payload => ({type: SET_RECTANGLE_FAILURE, payload});\r\n","export const selectRectangles = state => state.rectangle.entities;\r\n\r\nexport const selectRectangleErrorMessage = state => state.rectangle.errorMessage;\r\n\r\nexport const selectRectangleIsLoading = state => state.rectangle.isLoading;\r\n\r\nexport const selectRectangleIsSuccess = state => state.rectangle.isSuccess;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setRectangleRequest} from './rectangle.actions';\r\nimport {RectangleComponent} from './rectangle.component';\r\nimport {selectRectangleErrorMessage, selectRectangleIsLoading, selectRectangleIsSuccess} from './rectangle.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectRectangleErrorMessage(state),\r\n    isLoading: selectRectangleIsLoading(state),\r\n    isSuccess: selectRectangleIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRectangleRequest: bindActionCreators(setRectangleRequest, dispatch)\r\n});\r\n\r\nexport const Rectangle = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RectangleComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {\r\n    defaultRectangleX1,\r\n    defaultRectangleX2,\r\n    defaultRectangleY1,\r\n    defaultRectangleY2,\r\n    messages,\r\n    validationMessages\r\n} from '../../App.constants';\r\n\r\nexport function RectangleComponent({\r\n                                       errorMessage,\r\n                                       handleNext,\r\n                                       isLoading,\r\n                                       isSuccess,\r\n                                       setRectangleRequest\r\n                                   }) {\r\n    const [x1, setX1] = useState(defaultRectangleX1);\r\n    const [x2, setX2] = useState(defaultRectangleX2);\r\n    const [y1, setY1] = useState(defaultRectangleY1);\r\n    const [y2, setY2] = useState(defaultRectangleY2);\r\n\r\n    const onNext = () => {\r\n        if (isSuccess) handleNext();\r\n    };\r\n\r\n    const onSubmit = () => {\r\n        setRectangleRequest({x1, y1, x2, y2})\r\n    };\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isSuccess && <Toast message={messages.newRectangleAdded} type=\"success\"/>\r\n            }\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint xCoordinate\"\r\n                        name=\"x1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={x1}\r\n                        onChange={val => setX1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x1}\r\n                        helperText={!x1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint yCoordinate\"\r\n                        name=\"y1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={y1}\r\n                        onChange={val => setY1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y1}\r\n                        helperText={!y1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint xCoordinate\"\r\n                        name=\"x2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={x2}\r\n                        onChange={val => setX2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x2}\r\n                        helperText={!x2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint yCoordinate\"\r\n                        name=\"y2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={y2}\r\n                        onChange={val => setY2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y2}\r\n                        helperText={!y2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onNext={onNext}\r\n                    onSubmit={onSubmit}\r\n                    nextDisabled={!isSuccess}\r\n                    submitDisabled={!x1 || !x2 || !y1 || !y2}/>\r\n        </>\r\n    )\r\n}\r\n\r\nRectangleComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setRectangleRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_RECTANGLE_FAILURE, SET_RECTANGLE_REQUEST, SET_RECTANGLE_SUCCESS} from './rectangle.actions';\r\n\r\nexport const initialState = {\r\n    errorMessage: '',\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    entities: []\r\n};\r\n\r\nexport const rectangleReducer = handleActions({\r\n    [SET_RECTANGLE_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_RECTANGLE_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_RECTANGLE_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            errorMessage: '',\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            entities: [\r\n                ...state.entities,\r\n                {\r\n                    x1: payload.x1,\r\n                    x2: payload.x2,\r\n                    y1: payload.y1,\r\n                    y2: payload.y2\r\n                }\r\n            ]\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_RECTANGLE_REQUEST, setRectangleFailure, setRectangleSuccess} from './rectangle.actions';\r\n\r\nfunction* validateRectangleSaga({x1, y1, x2, y2}) {\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    if (!x1 || !y1 || x1 < 0 || x1 > canvasWidth || y1 < 0 || y1 > canvasHeight) return validationMessages.point1IsOutOfCanvas;\r\n    if (!x2 || !y2 || x2 < 0 || x2 > canvasWidth || y2 < 0 || y2 > canvasHeight) return validationMessages.point2IsOutOfCanvas;\r\n    if (x1 === x2 && y1 === y2) return validationMessages.pointsAreEqual;\r\n    if ((x1 === x2 && y1 !== y2) || (x1 !== x2 && y1 === y2)) return validationMessages.shouldNotBeEqualByXYCoordinates;\r\n}\r\n\r\nexport function* setRectangleSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_RECTANGLE_REQUEST);\r\n        const errorMessage = yield call(validateRectangleSaga, payload);\r\n        errorMessage ? yield put(setRectangleFailure(errorMessage)) : yield put(setRectangleSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* rectangleSaga() {\r\n    yield fork(setRectangleSaga);\r\n}\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {selectCanvas} from '../applets/canvas';\r\nimport {selectFill} from '../applets/fill';\r\nimport {selectLines} from '../applets/line';\r\nimport {selectRectangles} from '../applets/rectangle';\r\nimport {fillBoard, getBoard, getLinesCoordinates, getRectanglesCoordinates} from '../helpers/board.helper';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        margin: '1em auto'\r\n    },\r\n    td: {\r\n        border: '1px solid #DDD',\r\n        height: '1em',\r\n        width: '1em'\r\n    },\r\n    figure: {\r\n        backgroundColor: '#3f51b5'\r\n    }\r\n});\r\n\r\nfunction BoardComponent({\r\n                            canvas,\r\n                            fill,\r\n                            lines,\r\n                            rectangles,\r\n                            classes\r\n                        }) {\r\n    const linesCoordinates = getLinesCoordinates(lines);\r\n    const rectanglesCoordinates = getRectanglesCoordinates(rectangles);\r\n    const [board, setBoard] = useState(getBoard(canvas.height, canvas.width, linesCoordinates, rectanglesCoordinates));\r\n    return (\r\n        <table className={classes.table}>\r\n            <tbody>\r\n            {\r\n                board.map((row, i) =>\r\n                    <tr key={i}>\r\n                        {\r\n                            row.map((cell, j) =>\r\n                                <td\r\n                                    key={j}\r\n                                    onClick={() => {\r\n                                        setBoard([]);\r\n                                        setTimeout(() => {\r\n                                            setBoard(fillBoard(board, i, j))\r\n                                        }, 0)\r\n                                    }}\r\n                                    className={classNames(classes.td, {\r\n                                        [classes.figure]: cell.value === 1\r\n                                    })}\r\n                                    style={{backgroundColor: cell.value === 2 && fill.color}}\r\n                                />)\r\n                        }\r\n                    </tr>)\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nBoardComponent.propTypes = {\r\n    canvas: PropTypes.object.isRequired,\r\n    fill: PropTypes.object.isRequired,\r\n    lines: PropTypes.array.isRequired,\r\n    rectangles: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    canvas: selectCanvas(state),\r\n    fill: selectFill(state),\r\n    lines: selectLines(state),\r\n    rectangles: selectRectangles(state)\r\n});\r\n\r\nexport const Board = connect(\r\n    mapStateToProps,\r\n    null\r\n)(withStyles(styles)(BoardComponent));\r\n","export const fillBoard = (board, x, y) => {\r\n    let newBoard = board;\r\n    if (newBoard[x] && newBoard[x][y] && newBoard[x][y].value === 0) {\r\n        newBoard[x][y].value = 2;\r\n        newBoard = fillBoard(newBoard, x - 1, y);\r\n        newBoard = fillBoard(newBoard, x + 1, y);\r\n        newBoard = fillBoard(newBoard, x, y - 1);\r\n        newBoard = fillBoard(newBoard, x, y + 1);\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nexport const getBoard = (height, width, lineCoordinates, rectangleCoordinates) => {\r\n    const board = [];\r\n    for (let i = 0; i < height; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < width; j++) {\r\n            row.push({value: 0});\r\n        }\r\n        board.push(row);\r\n    }\r\n    [...lineCoordinates, ...rectangleCoordinates].forEach(([x, y]) => {\r\n        board[y][x].value = 1;\r\n    });\r\n    return board;\r\n};\r\n\r\nexport const getLinesCoordinates = lines => {\r\n    const coordinates = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const {x1, y1, x2, y2} = lines[i];\r\n        const isHorizontal = x1 !== x2;\r\n        const startPoint = isHorizontal ? x1 - 1 : y1 - 1;\r\n        const endPoint = isHorizontal ? x2 : y2;\r\n        for (let i = startPoint; i < endPoint; i++) {\r\n            coordinates.push(isHorizontal ? [i, startPoint] : [startPoint, i]);\r\n        }\r\n    }\r\n    return coordinates\r\n};\r\n\r\nexport const getRectanglesCoordinates = rectangles => {\r\n    const coordinates = [];\r\n    for (let i = 0; i < rectangles.length; i++) {\r\n        const {x1, y1, x2, y2} = rectangles[i];\r\n        for (let i = x1 - 1; i < x2; i++) {\r\n            coordinates.push([i, y1 - 1], [i, y2 - 1]);\r\n        }\r\n        for (let i = y1; i < y2; i++) {\r\n            coordinates.push([x1 - 1, i], [x2 - 1, i]);\r\n        }\r\n    }\r\n    return coordinates;\r\n};\r\n","import React, {useState} from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Canvas} from '../applets/canvas';\r\nimport {Fill} from '../applets/fill';\r\nimport {Line} from '../applets/line';\r\nimport {Rectangle} from '../applets/rectangle';\r\n\r\nconst styles = () => ({\r\n    stepper: {\r\n        paddingTop: 30,\r\n        paddingBottom: 50\r\n    }\r\n});\r\n\r\nconst labelsOfSteps = ['Canvas', 'Line', 'Rectangle', 'Bucket Fill'];\r\n\r\nconst SettingsComponent = ({classes, onSubmit}) => {\r\n    const [steps, setSteps] = useState(0);\r\n\r\n    const handleNext = () => setSteps(steps + 1);\r\n\r\n    const handleSteps = step => ({\r\n        0: <Canvas handleNext={handleNext}/>,\r\n        1: <Line handleNext={handleNext}/>,\r\n        2: <Rectangle handleNext={handleNext}/>,\r\n        3: <Fill handleNext={handleNext}/>\r\n    }[step]);\r\n\r\n    if (steps === labelsOfSteps.length) onSubmit();\r\n    return (\r\n        <>\r\n            <Stepper activeStep={steps} className={classes.stepper} alternativeLabel>\r\n                {\r\n                    labelsOfSteps.map(label => (<Step key={label}><StepLabel>{label}</StepLabel></Step>))\r\n                }\r\n            </Stepper>\r\n            {handleSteps(steps)}\r\n        </>\r\n    )\r\n};\r\n\r\nSettingsComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport const Settings = withStyles(styles)(SettingsComponent);\r\n","import React, {useState} from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport {Header} from './components/header.component';\nimport {Board} from './screens/board.screen';\nimport {Settings} from './screens/settings.screen';\nimport './App.css';\n\nconst styles = theme => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 1000,\n            marginLeft: 'auto',\n            marginRight: 'auto'\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(8),\n            marginBottom: theme.spacing(8),\n            padding: theme.spacing(3)\n        }\n    }\n});\n\nfunction AppComponent({classes}) {\n    const [isAllSettingsAvailable, setSettings] = useState(false);\n    return (\n        <div className=\"App\">\n            <CssBaseline/>\n            <Header/>\n            <main className={classes.layout}>\n                <Paper className={classes.paper}>\n                    {isAllSettingsAvailable ? <Board/> : <Settings onSubmit={() => setSettings(true)}/>}\n                </Paper>\n            </main>\n        </div>\n    );\n}\n\nAppComponent.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport const App = withStyles(styles)(AppComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\r\n\r\nimport {canvasReducer} from '../applets/canvas';\r\nimport {fillReducer} from '../applets/fill';\r\nimport {lineReducer} from '../applets/line';\r\nimport {rectangleReducer} from '../applets/rectangle';\r\n\r\nexport const rootReducer = combineReducers({\r\n    canvas: canvasReducer,\r\n    fill: fillReducer,\r\n    line: lineReducer,\r\n    rectangle: rectangleReducer\r\n});\r\n","import {all} from 'redux-saga/effects'\r\n\r\nimport {canvasSaga} from '../applets/canvas';\r\nimport {fillSaga} from '../applets/fill';\r\nimport {lineSaga} from '../applets/line';\r\nimport {rectangleSaga} from '../applets/rectangle';\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        canvasSaga(),\r\n        fillSaga(),\r\n        lineSaga(),\r\n        rectangleSaga()\r\n    ]);\r\n}\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport {rootReducer} from './reducers'\r\nimport {rootSaga} from './saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = applyMiddleware(sagaMiddleware);\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(middleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}