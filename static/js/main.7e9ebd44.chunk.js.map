{"version":3,"sources":["App.constants.js","components/header.component.js","applets/canvas/canvas.actions.js","components/submit.component.js","components/toast.component.js","applets/canvas/canvas.selectors.js","applets/canvas/canvas.container.js","applets/canvas/canvas.component.js","applets/canvas/canvas.reducer.js","applets/canvas/canvas.saga.js","applets/fill/fill.actions.js","applets/fill/fill.selectors.js","applets/fill/fill.container.js","applets/fill/fill.component.js","applets/fill/fill.reducer.js","applets/fill/fill.saga.js","applets/line/line.actions.js","applets/line/line.selectors.js","applets/line/line.container.js","applets/line/line.component.js","applets/line/line.reducer.js","applets/line/line.saga.js","applets/rectangle/rectangle.actions.js","applets/rectangle/rectangle.selectors.js","applets/rectangle/rectangle.container.js","applets/rectangle/rectangle.component.js","applets/rectangle/rectangle.reducer.js","applets/rectangle/rectangle.saga.js","screens/board.screen.js","helpers/board.helper.js","screens/settings.screen.js","App.js","serviceWorker.js","store/reducers.js","store/saga.js","store/index.js","index.js"],"names":["validationMessages","canvasHeight","canvasWidth","invalidColor","fillHeightRule","fillWidthRule","point1IsOutOfCanvas","point2IsOutOfCanvas","pointsAreEqual","requiredField","shouldBeEqualByXYCoordinates","shouldNotBeEqualByXYCoordinates","somethingWentWrong","Header","withStyles","appBar","position","iconMargin","marginLeft","classes","AppBar","className","Toolbar","Typography","variant","noWrap","IconButton","color","aria-label","Link","href","target","title","setCanvasRequest","payload","type","setCanvasSuccess","setCanvasFailure","Submit","wrapper","display","marginTop","justifyContent","disabled","onClick","Button","Toast","message","Snackbar","open","severity","selectCanvas","state","height","canvas","width","selectCanvasErrorMessage","errorMessage","selectCanvasHeight","selectCanvasIsLoading","isLoading","selectCanvasIsSuccess","isSuccess","selectCanvasWidth","Canvas","connect","dispatch","bindActionCreators","handleNext","useState","setWidth","setHeight","LinearProgress","Grid","container","item","xs","TextField","fullWidth","label","name","placeholder","defaultValue","onChange","val","value","margin","required","error","helperText","canvasReducer","handleActions","setCanvasSaga","canvasSaga","validateCanvasSaga","take","put","fork","setFillRequest","setFillSuccess","setFillFailure","selectFill","fill","selectFillErrorMessage","selectFillIsSuccess","selectFillIsLoading","Fill","setColor","fillReducer","validateFillSaga","setFillSaga","fillSaga","select","match","call","setLineRequest","setLineSuccess","setLineFailure","selectLine","x1","line","y1","x2","y2","selectLineErrorMessage","selectLineIsLoading","selectLineIsSuccess","Line","setX1","setX2","setY1","setY2","lineReducer","validateLineSaga","setLineSaga","lineSaga","setRectangleRequest","setRectangleSuccess","setRectangleFailure","selectRectangle","rectangle","selectRectangleErrorMessage","selectRectangleIsLoading","selectRectangleIsSuccess","Rectangle","rectangleReducer","validateRectangleSaga","setRectangleSaga","rectangleSaga","Board","table","td","border","figure","backgroundColor","lineCoordinates","isHorizontal","startPoint","endPoint","coordinates","i","push","getLineCoordinates","rectangleCoordinates","getRectangleCoordinates","board","row","j","forEach","x","y","getBoard","setBoard","map","key","cell","setTimeout","fillBoard","newBoard","classNames","style","labelsOfSteps","Settings","stepper","paddingTop","paddingBottom","step","onSubmit","steps","setSteps","length","Stepper","activeStep","alternativeLabel","Step","StepLabel","0","1","2","3","App","theme","layout","spacing","marginRight","breakpoints","up","paper","marginBottom","padding","isAllSettingsAvailable","setSettings","CssBaseline","Paper","Boolean","window","location","hostname","rootReducer","combineReducers","rootSaga","all","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","store","createStore","composeWithDevTools","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7e9ebd44.chunk.js","sourcesContent":["export const minCanvasHeight = 20;\r\nexport const minCanvasWidth = 20;\r\nexport const maxCanvasHeight = 100;\r\nexport const maxCanvasWidth = 100;\r\n\r\nexport const defaultFillColor = '#f44336';\r\nexport const minFillHeight = 1;\r\nexport const minFillWidth = 1;\r\n\r\nexport const defaultLineX1 = 1;\r\nexport const defaultLineX2 = 1;\r\nexport const defaultLineY1 = 1;\r\nexport const defaultLineY2 = 4;\r\n\r\nexport const defaultRectangleX1 = 3;\r\nexport const defaultRectangleX2 = 7;\r\nexport const defaultRectangleY1 = 3;\r\nexport const defaultRectangleY2 = 7;\r\n\r\nexport const projectTitle = 'Simple Paint';\r\nexport const githubUrl = 'http://github.com/bekstoro/simple-paint';\r\n\r\nexport const validationMessages = {\r\n    canvasHeight: `Height is required field, it should be greater than ${minCanvasHeight} and less than ${maxCanvasHeight}`,\r\n    canvasWidth: `Width is required field, it should be greater than ${minCanvasWidth} and less than ${maxCanvasWidth}`,\r\n    invalidColor: 'Invalid color',\r\n    fillHeightRule: (canvasHeight) => `Height is required field, it should be greater than 0 and less than canvas height: ${canvasHeight}`,\r\n    fillWidthRule: (canvasWidth) => `Width is required field, it should be greater than 0 and less than canvas width: ${canvasWidth}`,\r\n    point1IsOutOfCanvas: 'Point 1 is out of canvas',\r\n    point2IsOutOfCanvas: 'Point 2 is out of canvas',\r\n    pointsAreEqual: 'Points are equal',\r\n    requiredField: 'This field is required',\r\n    shouldBeEqualByXYCoordinates: 'Should be equal by X or Y coordinates',\r\n    shouldNotBeEqualByXYCoordinates: 'Should not be equal by X or Y coordinates',\r\n    somethingWentWrong: 'Something went wrong'\r\n};\r\n","import React from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from '@material-ui/core/Link';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GithubIcon from '@material-ui/icons/GitHub'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {githubUrl, projectTitle} from '../App.constants';\r\n\r\nconst styles = () => ({\r\n    appBar: {\r\n        position: 'relative'\r\n    },\r\n    iconMargin: {\r\n        marginLeft: 'auto'\r\n    }\r\n});\r\n\r\nconst HeaderComponent = ({classes}) =>\r\n    <AppBar className={classes.appBar}>\r\n        <Toolbar>\r\n            <Typography variant=\"h6\" noWrap>{projectTitle}</Typography>\r\n            <IconButton color=\"inherit\" aria-label=\"Github\" className={classes.iconMargin}>\r\n                <Link\r\n                    href={githubUrl}\r\n                    target=\"_blank\"\r\n                    title=\"Github\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <GithubIcon/>\r\n                </Link>\r\n            </IconButton>\r\n        </Toolbar>\r\n    </AppBar>;\r\n\r\nHeaderComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport const Header = withStyles(styles)(HeaderComponent);\r\n","export const SET_CANVAS_REQUEST = 'SET_CANVAS_REQUEST';\r\nexport const setCanvasRequest = payload => ({type: SET_CANVAS_REQUEST, payload});\r\n\r\nexport const SET_CANVAS_SUCCESS = 'SET_CANVAS_SUCCESS';\r\nexport const setCanvasSuccess = payload => ({type: SET_CANVAS_SUCCESS, payload});\r\n\r\nexport const SET_CANVAS_FAILURE = 'SET_CANVAS_FAILURE';\r\nexport const setCanvasFailure = payload => ({type: SET_CANVAS_FAILURE, payload});\r\n","import React from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = () => ({\r\n    wrapper: {\r\n        display: 'flex',\r\n        marginTop: 20,\r\n        justifyContent: 'flex-end'\r\n    }\r\n});\r\n\r\nconst SubmitComponent = ({\r\n                             classes,\r\n                             disabled,\r\n                             onClick\r\n                         }) =>\r\n    <div className={classes.wrapper}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onClick} disabled={disabled}>\r\n            Next\r\n        </Button>\r\n    </div>;\r\n\r\nSubmitComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    disabled: PropTypes.bool,\r\n    onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport const Submit = withStyles(styles)(SubmitComponent);\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {validationMessages} from '../App.constants';\r\n\r\nexport function Toast({message = validationMessages.somethingWentWrong}) {\r\n    return (\r\n        <Snackbar open={!!message}>\r\n            <MuiAlert variant=\"filled\" severity=\"error\">\r\n                {message}\r\n            </MuiAlert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\nToast.propTypes = {\r\n    message: PropTypes.string\r\n};\r\n","export const selectCanvas = state => ({height: state.canvas.height, width: state.canvas.width});\r\n\r\nexport const selectCanvasErrorMessage = state => state.canvas.errorMessage;\r\n\r\nexport const selectCanvasHeight = state => state.canvas.height;\r\n\r\nexport const selectCanvasIsLoading = state => state.canvas.isLoading;\r\n\r\nexport const selectCanvasIsSuccess = state => state.canvas.isSuccess;\r\n\r\nexport const selectCanvasWidth = state => state.canvas.width;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setCanvasRequest} from './canvas.actions';\r\nimport {CanvasComponent} from './canvas.component';\r\nimport {selectCanvasErrorMessage, selectCanvasIsLoading, selectCanvasIsSuccess} from './canvas.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectCanvasErrorMessage(state),\r\n    isLoading: selectCanvasIsLoading(state),\r\n    isSuccess: selectCanvasIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCanvasRequest: bindActionCreators(setCanvasRequest, dispatch)\r\n});\r\n\r\nexport const Canvas = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CanvasComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {minCanvasHeight, minCanvasWidth, validationMessages} from '../../App.constants';\r\n\r\nexport function CanvasComponent({\r\n                                    errorMessage,\r\n                                    handleNext,\r\n                                    isLoading,\r\n                                    isSuccess,\r\n                                    setCanvasRequest\r\n                                }) {\r\n    const [width, setWidth] = useState(minCanvasWidth);\r\n    const [height, setHeight] = useState(minCanvasHeight);\r\n\r\n    if (isSuccess) handleNext();\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!width}\r\n                        helperText={!width && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!height}\r\n                        helperText={!height && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onClick={() => setCanvasRequest({width, height})} disabled={!width || !height}/>\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setCanvasRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_CANVAS_FAILURE, SET_CANVAS_REQUEST, SET_CANVAS_SUCCESS} from './canvas.actions';\r\n\r\nexport const initialState = {\r\n    errorMessage: '',\r\n    height: 0,\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    width: 0\r\n};\r\n\r\nexport const canvasReducer = handleActions({\r\n    [SET_CANVAS_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_CANVAS_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_CANVAS_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            errorMessage: '',\r\n            height: payload.height,\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            width: payload.width\r\n        })\r\n}, initialState);\r\n","import {fork, put, take} from 'redux-saga/effects';\r\n\r\nimport {\r\n    maxCanvasHeight,\r\n    maxCanvasWidth,\r\n    minCanvasHeight,\r\n    minCanvasWidth,\r\n    validationMessages\r\n} from '../../App.constants';\r\nimport {SET_CANVAS_REQUEST, setCanvasFailure, setCanvasSuccess} from './canvas.actions';\r\n\r\nconst validateCanvasSaga = ({width, height}) => {\r\n    if (!width || width < minCanvasWidth || width > maxCanvasWidth) return validationMessages.canvasWidth;\r\n    if (!height || height < minCanvasHeight || height > maxCanvasHeight) return validationMessages.canvasHeight;\r\n};\r\n\r\nfunction* setCanvasSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_CANVAS_REQUEST);\r\n        const errorMessage = validateCanvasSaga(payload);\r\n        errorMessage ? yield put(setCanvasFailure(errorMessage)) : yield put(setCanvasSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* canvasSaga() {\r\n    yield fork(setCanvasSaga);\r\n}\r\n","export const SET_FILL_REQUEST = 'SET_FILL_REQUEST';\r\nexport const setFillRequest = payload => ({type: SET_FILL_REQUEST, payload});\r\n\r\nexport const SET_FILL_SUCCESS = 'SET_FILL_SUCCESS';\r\nexport const setFillSuccess = payload => ({type: SET_FILL_SUCCESS, payload});\r\n\r\nexport const SET_FILL_FAILURE = 'SET_FILL_FAILURE';\r\nexport const setFillFailure = payload => ({type: SET_FILL_FAILURE, payload});\r\n","export const selectFill = state => ({height: state.fill.height, width: state.fill.width, color: state.fill.color});\r\n\r\nexport const selectFillColor = state => state.fill.color;\r\n\r\nexport const selectFillErrorMessage = state => state.fill.errorMessage;\r\n\r\nexport const selectFillHeight = state => state.fill.height;\r\n\r\nexport const selectFillIsSuccess = state => state.fill.isSuccess;\r\n\r\nexport const selectFillIsLoading = state => state.fill.isLoading;\r\n\r\nexport const selectFillWidth = state => state.fill.width;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setFillRequest} from './fill.actions';\r\nimport {FillComponent} from './fill.component';\r\nimport {selectFillErrorMessage, selectFillIsLoading, selectFillIsSuccess} from './fill.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectFillErrorMessage(state),\r\n    isLoading: selectFillIsLoading(state),\r\n    isSuccess: selectFillIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFillRequest: bindActionCreators(setFillRequest, dispatch)\r\n});\r\n\r\nexport const Fill = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(FillComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {defaultFillColor, minFillHeight, minFillWidth, validationMessages} from '../../App.constants';\r\n\r\nexport function FillComponent({\r\n                                  errorMessage,\r\n                                  handleNext,\r\n                                  isLoading,\r\n                                  isSuccess,\r\n                                  setFillRequest\r\n                              }) {\r\n    const [width, setWidth] = useState(minFillWidth);\r\n    const [height, setHeight] = useState(minFillHeight);\r\n    const [color, setColor] = useState(defaultFillColor);\r\n\r\n    if (isSuccess) handleNext();\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Width\"\r\n                        name=\"width\"\r\n                        placeholder=\"Set width\"\r\n                        defaultValue={width}\r\n                        onChange={val => setWidth(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!width}\r\n                        helperText={!width && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Height\"\r\n                        name=\"height\"\r\n                        placeholder=\"Set height\"\r\n                        defaultValue={height}\r\n                        onChange={val => setHeight(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!height}\r\n                        helperText={!height && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"Color\"\r\n                        name=\"color\"\r\n                        placeholder=\"Set color\"\r\n                        defaultValue={color}\r\n                        onChange={val => setColor(val.target.value)}\r\n                        margin=\"normal\"\r\n                        required\r\n                        error={!color}\r\n                        helperText={!color && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onClick={() => setFillRequest({width, height, color})} disabled={!width || !height || !color}/>\r\n        </>\r\n    )\r\n}\r\n\r\nFillComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setFillRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_FILL_FAILURE, SET_FILL_REQUEST, SET_FILL_SUCCESS} from './fill.actions';\r\n\r\nexport const initialState = {\r\n    color: '',\r\n    errorMessage: '',\r\n    height: 0,\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    width: 0\r\n};\r\n\r\nexport const fillReducer = handleActions({\r\n    [SET_FILL_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_FILL_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_FILL_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            color: payload.color,\r\n            errorMessage: '',\r\n            height: payload.height,\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            width: payload.width\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_FILL_REQUEST, setFillFailure, setFillSuccess} from './fill.actions';\r\n\r\nfunction* validateFillSaga({width, height, color}) {\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    if (!width || width < 0 || width > canvasWidth) return validationMessages.fillWidthRule(canvasWidth);\r\n    if (!height || height < 0 || height > canvasHeight) return validationMessages.fillHeightRule(canvasHeight);\r\n    if (!color.match( /#[a-f0-9]{6}/gi )) return validationMessages.invalidColor;\r\n}\r\n\r\nfunction* setFillSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_FILL_REQUEST);\r\n        const errorMessage = yield call(validateFillSaga, payload);\r\n        errorMessage ? yield put(setFillFailure(errorMessage)) : yield put(setFillSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* fillSaga() {\r\n    yield fork(setFillSaga);\r\n}\r\n","export const SET_LINE_REQUEST = 'SET_LINE_REQUEST';\r\nexport const setLineRequest = payload => ({type: SET_LINE_REQUEST, payload});\r\n\r\nexport const SET_LINE_SUCCESS = 'SET_LINE_SUCCESS';\r\nexport const setLineSuccess = payload => ({type: SET_LINE_SUCCESS, payload});\r\n\r\nexport const SET_LINE_FAILURE = 'SET_LINE_FAILURE';\r\nexport const setLineFailure = payload => ({type: SET_LINE_FAILURE, payload});\r\n","export const selectLine = state => ({x1: state.line.x1, y1: state.line.y1, x2: state.line.x2, y2: state.line.y2});\r\n\r\nexport const selectLineErrorMessage = state => state.line.errorMessage;\r\n\r\nexport const selectLineIsLoading = state => state.line.isLoading;\r\n\r\nexport const selectLineIsSuccess = state => state.line.isSuccess;\r\n\r\nexport const selectLineX1 = state => state.line.x1;\r\n\r\nexport const selectLineX2 = state => state.line.x2;\r\n\r\nexport const selectLineY1 = state => state.line.y1;\r\n\r\nexport const selectLineY2 = state => state.line.y2;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setLineRequest} from './line.actions';\r\nimport {LineComponent} from './line.component';\r\nimport {selectLineErrorMessage, selectLineIsLoading, selectLineIsSuccess} from './line.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectLineErrorMessage(state),\r\n    isLoading: selectLineIsLoading(state),\r\n    isSuccess: selectLineIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setLineRequest: bindActionCreators(setLineRequest, dispatch)\r\n});\r\n\r\nexport const Line = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LineComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {defaultLineX1, defaultLineX2, defaultLineY1, defaultLineY2, validationMessages} from '../../App.constants';\r\n\r\nexport function LineComponent({\r\n                                  errorMessage,\r\n                                  handleNext,\r\n                                  isLoading,\r\n                                  isSuccess,\r\n                                  setLineRequest\r\n                              }) {\r\n    const [x1, setX1] = useState(defaultLineX1);\r\n    const [x2, setX2] = useState(defaultLineX2);\r\n    const [y1, setY1] = useState(defaultLineY1);\r\n    const [y2, setY2] = useState(defaultLineY2);\r\n\r\n    if (isSuccess) handleNext();\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint xCoordinate\"\r\n                        name=\"x1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x1}\r\n                        onChange={val => setX1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x1}\r\n                        helperText={!x1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"StartPoint yCoordinate\"\r\n                        name=\"y1\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y1}\r\n                        onChange={val => setY1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y1}\r\n                        helperText={!y1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint xCoordinate\"\r\n                        name=\"x2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={x2}\r\n                        onChange={val => setX2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x2}\r\n                        helperText={!x2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"EndPoint yCoordinate\"\r\n                        name=\"y2\"\r\n                        placeholder=\"Set xCoordinate for startPoint\"\r\n                        defaultValue={y2}\r\n                        onChange={val => setY2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y2}\r\n                        helperText={!y2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onClick={() => setLineRequest({x1, y1, x2, y2})} disabled={!x1 || !x2 || !y1 || !y2}/>\r\n        </>\r\n    )\r\n}\r\n\r\nLineComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setLineRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_LINE_FAILURE, SET_LINE_REQUEST, SET_LINE_SUCCESS} from './line.actions';\r\n\r\nexport const initialState = {\r\n    errorMessage: '',\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    x1: 0,\r\n    x2: 0,\r\n    y1: 0,\r\n    y2: 0\r\n};\r\n\r\nexport const lineReducer = handleActions({\r\n    [SET_LINE_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_LINE_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_LINE_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            errorMessage: '',\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            x1: payload.x1,\r\n            x2: payload.x2,\r\n            y1: payload.y1,\r\n            y2: payload.y2\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_LINE_REQUEST, setLineFailure, setLineSuccess} from './line.actions';\r\n\r\nfunction* validateLineSaga({x1, y1, x2, y2}) {\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    if (!x1 || !y1 || x1 < 0 || x1 > canvasWidth || y1 < 0 || y1 > canvasHeight) return validationMessages.point1IsOutOfCanvas;\r\n    if (!x2 || !y2 || x2 < 0 || x2 > canvasWidth || y2 < 0 || y2 > canvasHeight) return validationMessages.point2IsOutOfCanvas;\r\n    if (x1 === x2 && y1 === y2) return validationMessages.pointsAreEqual;\r\n    if (x1 !== x2 && y1 !== y2) return validationMessages.shouldBeEqualByXYCoordinates;\r\n}\r\n\r\nfunction* setLineSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_LINE_REQUEST);\r\n        const errorMessage = yield call(validateLineSaga, payload);\r\n        errorMessage ? yield put(setLineFailure(errorMessage)) : yield put(setLineSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* lineSaga() {\r\n    yield fork(setLineSaga);\r\n}\r\n","export const SET_RECTANGLE_REQUEST = 'SET_RECTANGLE_REQUEST';\r\nexport const setRectangleRequest = payload => ({type: SET_RECTANGLE_REQUEST, payload});\r\n\r\nexport const SET_RECTANGLE_SUCCESS = 'SET_RECTANGLE_SUCCESS';\r\nexport const setRectangleSuccess = payload => ({type: SET_RECTANGLE_SUCCESS, payload});\r\n\r\nexport const SET_RECTANGLE_FAILURE = 'SET_RECTANGLE_FAILURE';\r\nexport const setRectangleFailure = payload => ({type: SET_RECTANGLE_FAILURE, payload});\r\n","export const selectRectangle = state => ({\r\n    x1: state.rectangle.x1,\r\n    y1: state.rectangle.y1,\r\n    x2: state.rectangle.x2,\r\n    y2: state.rectangle.y2\r\n});\r\n\r\nexport const selectRectangleErrorMessage = state => state.rectangle.errorMessage;\r\n\r\nexport const selectRectangleIsLoading = state => state.rectangle.isLoading;\r\n\r\nexport const selectRectangleIsSuccess = state => state.rectangle.isSuccess;\r\n\r\nexport const selectRectangleX1 = state => state.rectangle.x1;\r\n\r\nexport const selectRectangleX2 = state => state.rectangle.x2;\r\n\r\nexport const selectRectangleY1 = state => state.rectangle.y1;\r\n\r\nexport const selectRectangleY2 = state => state.rectangle.y2;\r\n","import {connect} from 'react-redux'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nimport {setRectangleRequest} from './rectangle.actions';\r\nimport {RectangleComponent} from './rectangle.component';\r\nimport {selectRectangleErrorMessage, selectRectangleIsLoading, selectRectangleIsSuccess} from './rectangle.selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n    errorMessage: selectRectangleErrorMessage(state),\r\n    isLoading: selectRectangleIsLoading(state),\r\n    isSuccess: selectRectangleIsSuccess(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setRectangleRequest: bindActionCreators(setRectangleRequest, dispatch)\r\n});\r\n\r\nexport const Rectangle = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RectangleComponent);\r\n","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Submit} from '../../components/submit.component';\r\nimport {Toast} from '../../components/toast.component';\r\nimport {\r\n    defaultRectangleX1,\r\n    defaultRectangleX2,\r\n    defaultRectangleY1,\r\n    defaultRectangleY2,\r\n    validationMessages\r\n} from '../../App.constants';\r\n\r\nexport function RectangleComponent({\r\n                                       errorMessage,\r\n                                       handleNext,\r\n                                       isLoading,\r\n                                       isSuccess,\r\n                                       setRectangleRequest\r\n                                   }) {\r\n    const [x1, setX1] = useState(defaultRectangleX1);\r\n    const [x2, setX2] = useState(defaultRectangleX2);\r\n    const [y1, setY1] = useState(defaultRectangleY1);\r\n    const [y2, setY2] = useState(defaultRectangleY2);\r\n\r\n    if (isSuccess) handleNext();\r\n\r\n    if (isLoading) return <LinearProgress/>;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                errorMessage && <Toast message={errorMessage}/>\r\n            }\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint xCoordinate\"\r\n                        name=\"x1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={x1}\r\n                        onChange={val => setX1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x1}\r\n                        helperText={!x1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"LeftTopPoint yCoordinate\"\r\n                        name=\"y1\"\r\n                        placeholder=\"Set xCoordinate for leftTopPoint\"\r\n                        defaultValue={y1}\r\n                        onChange={val => setY1(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y1}\r\n                        helperText={!y1 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint xCoordinate\"\r\n                        name=\"x2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={x2}\r\n                        onChange={val => setX2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!x2}\r\n                        helperText={!x2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        label=\"RightBottomPoint yCoordinate\"\r\n                        name=\"y2\"\r\n                        placeholder=\"Set xCoordinate for rightBottomPoint\"\r\n                        defaultValue={y2}\r\n                        onChange={val => setY2(+val.target.value)}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        required\r\n                        error={!y2}\r\n                        helperText={!y2 && validationMessages.requiredField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Submit onClick={() => setRectangleRequest({x1, y1, x2, y2})} disabled={!x1 || !x2 || !y1 || !y2}/>\r\n        </>\r\n    )\r\n}\r\n\r\nRectangleComponent.propTypes = {\r\n    errorMessage: PropTypes.string,\r\n    handleNext: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    isSuccess: PropTypes.bool,\r\n    setRectangleRequest: PropTypes.func.isRequired\r\n};\r\n","import {handleActions} from 'redux-actions';\r\n\r\nimport {SET_RECTANGLE_FAILURE, SET_RECTANGLE_REQUEST, SET_RECTANGLE_SUCCESS} from './rectangle.actions';\r\n\r\nexport const initialState = {\r\n    errorMessage: '',\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    x1: 0,\r\n    x2: 0,\r\n    y1: 0,\r\n    y2: 0\r\n};\r\n\r\nexport const rectangleReducer = handleActions({\r\n    [SET_RECTANGLE_FAILURE]:\r\n        (state, {payload: errorMessage}) => ({\r\n            ...state,\r\n            errorMessage,\r\n            isLoading: false,\r\n            isSuccess: false\r\n        }),\r\n    [SET_RECTANGLE_REQUEST]:\r\n        (state) => ({\r\n            ...state,\r\n            errorMessage: '',\r\n            isLoading: true,\r\n            isSuccess: false\r\n        }),\r\n    [SET_RECTANGLE_SUCCESS]:\r\n        (state, {payload}) => ({\r\n            errorMessage: '',\r\n            isLoading: false,\r\n            isSuccess: true,\r\n            x1: payload.x1,\r\n            x2: payload.x2,\r\n            y1: payload.y1,\r\n            y2: payload.y2\r\n        })\r\n}, initialState);\r\n","import {call, fork, put, select, take} from 'redux-saga/effects';\r\n\r\nimport {validationMessages} from '../../App.constants';\r\nimport {selectCanvasHeight, selectCanvasWidth} from '../canvas';\r\nimport {SET_RECTANGLE_REQUEST, setRectangleFailure, setRectangleSuccess} from './rectangle.actions';\r\n\r\nfunction* validateRectangleSaga({x1, y1, x2, y2}) {\r\n    const canvasHeight = yield select(selectCanvasHeight);\r\n    const canvasWidth = yield select(selectCanvasWidth);\r\n    if (!x1 || !y1 || x1 < 0 || x1 > canvasWidth || y1 < 0 || y1 > canvasHeight) return validationMessages.point1IsOutOfCanvas;\r\n    if (!x2 || !y2 || x2 < 0 || x2 > canvasWidth || y2 < 0 || y2 > canvasHeight) return validationMessages.point2IsOutOfCanvas;\r\n    if (x1 === x2 && y1 === y2) return validationMessages.pointsAreEqual;\r\n    if ((x1 === x2 && y1 !== y2) || (x1 !== x2 && y1 === y2)) return validationMessages.shouldNotBeEqualByXYCoordinates;\r\n}\r\n\r\nfunction* setRectangleSaga() {\r\n    while (true) {\r\n        const {payload} = yield take(SET_RECTANGLE_REQUEST);\r\n        const errorMessage = yield call(validateRectangleSaga, payload);\r\n        errorMessage ? yield put(setRectangleFailure(errorMessage)) : yield put(setRectangleSuccess(payload));\r\n    }\r\n}\r\n\r\nexport function* rectangleSaga() {\r\n    yield fork(setRectangleSaga);\r\n}\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {selectCanvas} from '../applets/canvas';\r\nimport {selectFill} from '../applets/fill';\r\nimport {selectLine} from '../applets/line';\r\nimport {selectRectangle} from '../applets/rectangle';\r\nimport {fillBoard, getBoard, getLineCoordinates, getRectangleCoordinates} from '../helpers/board.helper';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        margin: '1em auto'\r\n    },\r\n    td: {\r\n        border: '1px solid #DDD',\r\n        height: '1em',\r\n        width: '1em'\r\n    },\r\n    figure: {\r\n        backgroundColor: '#3f51b5'\r\n    }\r\n});\r\n\r\nfunction BoardComponent({\r\n                            canvas,\r\n                            fill,\r\n                            line,\r\n                            rectangle,\r\n                            classes\r\n                        }) {\r\n    const lineCoordinates = getLineCoordinates(line);\r\n    const rectangleCoordinates = getRectangleCoordinates(rectangle);\r\n    const [board, setBoard] = useState(getBoard(canvas.height, canvas.width, lineCoordinates, rectangleCoordinates));\r\n    return (\r\n        <table className={classes.table}>\r\n            <tbody>\r\n            {\r\n                board.map((row, i) =>\r\n                    <tr key={i}>\r\n                        {\r\n                            row.map((cell, j) =>\r\n                                <td\r\n                                    key={j}\r\n                                    onClick={() => {\r\n                                        setBoard([]);\r\n                                        setTimeout(() => {\r\n                                            setBoard(fillBoard(board, i, j))\r\n                                        }, 0)\r\n                                    }}\r\n                                    className={classNames(classes.td, {\r\n                                        [classes.figure]: cell.value === 1\r\n                                    })}\r\n                                    style={{backgroundColor: cell.value === 2 && fill.color}}\r\n                                />)\r\n                        }\r\n                    </tr>)\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nBoardComponent.propTypes = {\r\n    canvas: PropTypes.object.isRequired,\r\n    fill: PropTypes.object.isRequired,\r\n    line: PropTypes.object.isRequired,\r\n    rectangle: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    canvas: selectCanvas(state),\r\n    fill: selectFill(state),\r\n    line: selectLine(state),\r\n    rectangle: selectRectangle(state)\r\n});\r\n\r\nexport const Board = connect(\r\n    mapStateToProps,\r\n    null\r\n)(withStyles(styles)(BoardComponent));\r\n","export const fillBoard = (board, x, y) => {\r\n    let newBoard = board;\r\n    if (newBoard[x] && newBoard[x][y] && newBoard[x][y].value === 0) {\r\n        newBoard[x][y].value = 2;\r\n        newBoard = fillBoard(newBoard, x - 1, y);\r\n        newBoard = fillBoard(newBoard, x + 1, y);\r\n        newBoard = fillBoard(newBoard, x, y - 1);\r\n        newBoard = fillBoard(newBoard, x, y + 1);\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nexport const getBoard = (height, width, lineCoordinates, rectangleCoordinates) => {\r\n    const board = [];\r\n    for (let i = 0; i < height; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < width; j++) {\r\n            row.push({value: 0});\r\n        }\r\n        board.push(row);\r\n    }\r\n    [...lineCoordinates, ...rectangleCoordinates].forEach(([x, y]) => {\r\n        board[y][x].value = 1;\r\n    });\r\n    return board;\r\n};\r\n\r\nexport const getLineCoordinates = line => {\r\n    const {x1, y1, x2, y2} = line;\r\n    const isHorizontal = x1 !== x2;\r\n    const startPoint = isHorizontal ? x1 - 1 : y1 - 1;\r\n    const endPoint = isHorizontal ? x2 : y2;\r\n    const coordinates = [];\r\n    for (let i = startPoint; i < endPoint; i++) {\r\n        coordinates.push(isHorizontal ? [i, startPoint] : [startPoint, i]);\r\n    }\r\n    return coordinates\r\n};\r\n\r\nexport const getRectangleCoordinates = rectangle => {\r\n    const {x1, y1, x2, y2} = rectangle;\r\n    const coordinates = [];\r\n    for (let i = x1 - 1; i < x2; i++) {\r\n        coordinates.push([i, y1 - 1], [i, y2 - 1]);\r\n    }\r\n    for (let i = y1; i < y2; i++) {\r\n        coordinates.push([x1 - 1, i], [x2 - 1, i]);\r\n    }\r\n    return coordinates;\r\n};\r\n","import React, {useState} from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Canvas} from '../applets/canvas';\r\nimport {Fill} from '../applets/fill';\r\nimport {Line} from '../applets/line';\r\nimport {Rectangle} from '../applets/rectangle';\r\n\r\nconst styles = () => ({\r\n    stepper: {\r\n        paddingTop: 30,\r\n        paddingBottom: 50\r\n    }\r\n});\r\n\r\nconst labelsOfSteps = ['Canvas', 'Line', 'Rectangle', 'Bucket Fill'];\r\n\r\nconst SettingsComponent = ({classes, onSubmit}) => {\r\n    const [steps, setSteps] = useState(0);\r\n\r\n    const handleNext = () => setSteps(steps + 1);\r\n\r\n    const handleSteps = step => ({\r\n        0: <Canvas handleNext={handleNext}/>,\r\n        1: <Line handleNext={handleNext}/>,\r\n        2: <Rectangle handleNext={handleNext}/>,\r\n        3: <Fill handleNext={handleNext}/>\r\n    }[step]);\r\n\r\n    if (steps === labelsOfSteps.length) onSubmit();\r\n    return (\r\n        <>\r\n            <Stepper activeStep={steps} className={classes.stepper} alternativeLabel>\r\n                {\r\n                    labelsOfSteps.map(label => (<Step key={label}><StepLabel>{label}</StepLabel></Step>))\r\n                }\r\n            </Stepper>\r\n            {handleSteps(steps)}\r\n        </>\r\n    )\r\n};\r\n\r\nSettingsComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport const Settings = withStyles(styles)(SettingsComponent);\r\n","import React, {useState} from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport {Header} from './components/header.component';\nimport {Board} from './screens/board.screen';\nimport {Settings} from './screens/settings.screen';\nimport './App.css';\n\nconst styles = theme => ({\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 1000,\n            marginLeft: 'auto',\n            marginRight: 'auto'\n        }\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(8),\n            marginBottom: theme.spacing(8),\n            padding: theme.spacing(3)\n        }\n    }\n});\n\nfunction AppComponent({classes}) {\n    const [isAllSettingsAvailable, setSettings] = useState(false);\n    return (\n        <div className=\"App\">\n            <CssBaseline/>\n            <Header/>\n            <main className={classes.layout}>\n                <Paper className={classes.paper}>\n                    {isAllSettingsAvailable ? <Board/> : <Settings onSubmit={() => setSettings(true)}/>}\n                </Paper>\n            </main>\n        </div>\n    );\n}\n\nAppComponent.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nexport const App = withStyles(styles)(AppComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\r\n\r\nimport {canvasReducer} from '../applets/canvas';\r\nimport {fillReducer} from '../applets/fill';\r\nimport {lineReducer} from '../applets/line';\r\nimport {rectangleReducer} from '../applets/rectangle';\r\n\r\nexport const rootReducer = combineReducers({\r\n    canvas: canvasReducer,\r\n    fill: fillReducer,\r\n    line: lineReducer,\r\n    rectangle: rectangleReducer\r\n});\r\n","import {all} from 'redux-saga/effects'\r\n\r\nimport {canvasSaga} from '../applets/canvas';\r\nimport {fillSaga} from '../applets/fill';\r\nimport {lineSaga} from '../applets/line';\r\nimport {rectangleSaga} from '../applets/rectangle';\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        canvasSaga(),\r\n        fillSaga(),\r\n        lineSaga(),\r\n        rectangleSaga()\r\n    ]);\r\n}\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport {rootReducer} from './reducers'\r\nimport {rootSaga} from './saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = applyMiddleware(sagaMiddleware);\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(middleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}